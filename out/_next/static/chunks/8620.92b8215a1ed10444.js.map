{"version":3,"file":"static/chunks/8620.92b8215a1ed10444.js","mappings":"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","sources":["webpack://_N_E/./content/Links.ts","webpack://_N_E/./src/components/MainArea/Providers.tsx","webpack://_N_E/./src/components/MainArea/SigninArea.tsx","webpack://_N_E/<anon>"],"sourcesContent":["export const InternalLinks = {\n  LANDING_PAGE: \"/\",\n  SIGNIN_PAGE: \"/signin\",\n  SIGNUP_PAGE: \"/signup\",\n  ONBOARDING_PAGE: \"/onboarding\",\n  DEV_DASHBOARD: \"/Dashboards/Dev/\",\n  USER_DASHBOARD: \"/Dashboards/User/\",\n  ADMIN_DASHBOARD: \"/Dashboards/Admin/\",\n\n  EXPLORE_PAGE: \"/Explore/\",\n  ORGANISE_PAGE: \"/Explore/Organise\",\n  LABS_PAGE: \"/Explore/Labs/\",\n\n  CODEARENA_DASHBOARD_LINK: \"/Explore/CodeArena/Dashboard/\",\n  CODEARENA_DASHBOARD_ROUTE: \"/Explore/CodeArena/Dashboard/\",\n  CODEARENA_EDITCODEARENA: \"/Explore/CodeArena/EditCodeArena/\",\n  CODEARENA_PREVIEW: \"/Explore/CodeArena/Preview/\",\n  HACK_DASHBOARD_LINK: \"/Explore/Hack/Dashboard/\",\n  HACK_DASHBOARD_ROUTE: \"/Explore/Hack/Dashboard/\",\n  HACK_EDITHACK: \"/Explore/Hack/EditHack/\",\n  HACK_EDITHACK_ROUTE: \"/Explore/Hack/EditHack/\",\n  HACK_PREVIEW: \"/Explore/Hack/Preview/\",\n\n  BLOGS_PAGE: \"/blog\",\n  CAREERS_PAGE: \"/About/Careers\",\n  COMPANY_PAGE: \"/About/Company\",\n  CONTACT_US_PAGE: \"/About/ContactUs\",\n  REVIEWS_PRESS_PAGE: \"/About/ReviewsPress\",\n  TERMS_PRIVACY_PAGE: \"/About/TermsPrivacy\",\n  TERMS_CONDITIONS_PAGE: \"/About/TermsConditions\",\n  HIRE_DEVS_PAGE: \"/Customers/Hire-Devs\",\n  OUTSOURCE_PAGE: \"/Customers/Outsource\",\n  PRICING_PAGE: \"/Customers/Pricing\",\n  SPONSOR_PAGE: \"/Customers/Sponsor\",\n  EXTENSIONS_PAGE: \"/Product/Extensions\",\n  CHANGE_LOG_PAGE: \"/Product/ChangeLog\",\n  PLAYGROUND_PAGE: \"/Product/Playground\",\n  REQUEST_FEATURE_PAGE: \"/Product/RequestFeature\",\n  STATUS_PAGE: \"/Product/Status\",\n  COMET_PROFILE_PAGE: \"/Developers/Profile\",\n  COMMUNITY_PAGE: \"/Developers/Community/\",\n  EVANGELISTS_PAGE: \"/Developers/Evangelists/\",\n  GET_HIRED_PAGE: \"/Developers/GetHired\",\n\n  PROFILE_PAGE: \"/Dashboards/Dev/\"\n};\n\nexport const externalLinkProps = {\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n};\n\nexport const ExternalLinks = {\n  BLOGS_PAGE: {\n    href: \"https://cometlabs.in/About/Blogs\",\n    ...externalLinkProps,\n  },\n  LABS_PAGE: {\n    href: \"https://cometlabs.in/lab/\",\n    ...externalLinkProps,\n  },\n  CAREERS_PAGE: {\n    href: \"https://cometlabs.in/About/Careers\",\n    ...externalLinkProps,\n  },\n  COMPANY_PAGE: {\n    href: \"https://cometlabs.in/About/Company\",\n    ...externalLinkProps,\n  },\n  CONTACT_US_PAGE: {\n    href: \"https://cometlabs.in/About/ContactUs\",\n    ...externalLinkProps,\n  },\n  REVIEWS_PRESS_PAGE: {\n    href: \"https://cometlabs.in/About/ReviewsPress\",\n    ...externalLinkProps,\n  },\n  TERMS_PRIVACY_PAGE: {\n    href: \"https://cometlabs.in/About/TermsPrivacy\",\n    ...externalLinkProps,\n  },\n  TERMS_CONDITIONS_PAGE: {\n    href: \"https://cometlabs.in/About/TermsConditions\",\n    ...externalLinkProps,\n  },\n  HIRE_DEVS_PAGE: {\n    href: \"https://cometlabs.in/Customers/Hire-Devs\",\n    ...externalLinkProps,\n  },\n  OUTSOURCE_PAGE: {\n    href: \"https://cometlabs.in/Customers/Outsource\",\n    ...externalLinkProps,\n  },\n  PRICING_PAGE: {\n    href: \"https://cometlabs.in/Customers/Pricing\",\n    ...externalLinkProps,\n  },\n  SPONSOR_PAGE: {\n    href: \"https://cometlabs.in/Customers/Sponsor\",\n    ...externalLinkProps,\n  },\n  EXTENSIONS_PAGE: {\n    href: \"https://cometlabs.in/Product/Extensions\",\n    ...externalLinkProps,\n  },\n  CHANGE_LOG_PAGE: {\n    href: \"https://cometlabs.in/Product/ChangeLog\",\n    ...externalLinkProps,\n  },\n  PLAYGROUND_PAGE: {\n    href: \"https://cometlabs.in/Product/Playground\",\n    ...externalLinkProps,\n  },\n  REQUEST_FEATURE_PAGE: {\n    href: \"https://cometlabs.in/Product/RequestFeature\",\n    ...externalLinkProps,\n  },\n  STATUS_PAGE: {\n    href: \"https://cometlabs.in/Product/Status\",\n    ...externalLinkProps,\n  },\n  COMET_PROFILE_PAGE: {\n    href: \"https://cometlabs.in/Developers/Profile\",\n    ...externalLinkProps,\n  },\n  COMMUNITY_PAGE: {\n    href: \"https://cometlabs.in/Developers/Community\",\n    ...externalLinkProps,\n  },\n  EVANGELISTS_PAGE: {\n    href: \"https://cometlabs.in/Developers/Evangelists\",\n    ...externalLinkProps,\n  },\n  GET_HIRED_PAGE: {\n    href: \"https://cometlabs.in/Developers/GetHired\",\n    ...externalLinkProps,\n  },\n  COMETLABS_FACEBOOK: {\n    href: \"https://www.facebook.com/cometlabs.in/\",\n    ...externalLinkProps,\n  },\n  COMETLABS_INSTAGRAM: {\n    href: \"https://www.instagram.com/cometlabs/\",\n    ...externalLinkProps,\n  },\n  COMETLABS_LINKEDIN: {\n    href: \"https://www.linkedin.com/company/cometlabs/\",\n    ...externalLinkProps,\n  },\n  COMETLABS_TWITTER: {\n    href: \"https://twitter.com/cometlabs_ai\",\n    ...externalLinkProps,\n  },\n  COMETLABS_LINKTREE: {\n    href: \"https://linktr.ee/cometlabs\",\n    ...externalLinkProps,\n  },\n  COMETLABS_YOUTUBE: {\n    href: \"https://www.youtube.com/channel/UC9dP1nUtKZnP4Q3YtLTXVLQ\",\n    ...externalLinkProps,\n  },\n};\n","import { IconButton, Stack } from '@mui/material';\nimport React from 'react'\nimport { SiGithub, SiGoogle } from \"react-icons/si\";\nimport * as NextAuth from \"next-auth/react\";\nimport { BuiltInProviderType } from \"next-auth/providers\";\n\ninterface Providers {\n    providers: Record<NextAuth.LiteralUnion<BuiltInProviderType, string>, NextAuth.ClientSafeProvider>,\n}\n\nfunction Providers({ providers }: Providers) {\n    const getIcon = (name: string) => {\n        switch (name) {\n            case \"Google\":\n                return <SiGoogle fontSize=\"2rem\" />;\n            case \"GitHub\":\n                return <SiGithub fontSize=\"2rem\" />;\n            default:\n                return <SiGoogle />;\n        }\n    };\n\n    return (\n        <Stack direction=\"row\" columnGap={1} sx={{ mb: \"30px\", justifyContent: \"center\" }}>\n            {providers && Object.values(providers).map((provider) => {\n                const providerId = String(provider.name).toLowerCase();\n                if (providerId !== \"credentials\") {\n                    return (\n                        <IconButton\n                            onClick={() => { NextAuth.signIn(providerId) }}\n                            key={provider.name}\n                            color=\"inherit\"\n                            aria-label={provider.name}\n                        >\n                            {getIcon(provider.name)}\n                        </IconButton>\n                    );\n                }\n            })}\n        </Stack>\n    )\n}\n\nexport default Providers","import { Grid, Stack, Typography, Link, Box, TextField, IconButton, InputAdornment, Divider, Container } from '@mui/material';\nimport { OutlinedButton, FilledButton, TextButton, CardContainer } from \"@/styles/theme\";\nimport React from 'react'\nimport { MdOutlineVisibility, MdOutlineVisibilityOff } from \"react-icons/md\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { InternalLinks } from '@/content/Links';\nimport { useSnackbar } from 'notistack';\nimport * as NextAuth from \"next-auth/react\";\nimport { BuiltInProviderType } from \"next-auth/providers\";\nimport Providers from './Providers';\n\nexport type SignInFormData = {\n    email: string;\n    password: string;\n    remember: boolean;\n    confirm: string;\n};\n\ninterface SignIn {\n    providers: Record<NextAuth.LiteralUnion<BuiltInProviderType, string>, NextAuth.ClientSafeProvider>,\n    setPassword: React.Dispatch<React.SetStateAction<boolean>>,\n    setauthToken: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst SigninArea = ({ providers, setPassword, setauthToken }: SignIn) => {\n    const { handleSubmit, control, formState: { isSubmitting } } = useForm<SignInFormData>();\n    const { enqueueSnackbar } = useSnackbar();\n    const [forgot, setForgot] = React.useState<boolean>(false);\n    const [emailstatus, setEmailstatus] = React.useState<boolean>(false);\n    const [email, setEmail] = React.useState<string>();\n    const [otp, setOtp] = React.useState<string>();\n\n    const [forgetEmail, setForgetEmail] = React.useState<string>();\n\n    const [values, setValues] = React.useState({\n        password: '',\n        showPassword: false,\n    });\n\n    const handleClickShowPassword = () => {\n        setValues({\n            ...values,\n            showPassword: !values.showPassword,\n        });\n    };\n\n    const onForgotSubmit = async (email: string) => {\n        const { error } = await forgototp(email, \"\");\n        if (!!error) {\n            enqueueSnackbar(error, { variant: \"error\" });\n        } else {\n            enqueueSnackbar(\"OTP sent to \" + email, { variant: \"info\" });\n            setEmailstatus(true)\n            setEmail(email);\n        }\n    }\n\n    const forgototp = async (data: string, type: string) => {\n        try {\n            let res = await fetch(\n                process.env.NEXT_PUBLIC_API_URL + \"/api/signup/mailotp\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json;charset=utf-8\",\n                    },\n                    body: JSON.stringify({ email: data }),\n                }\n            );\n            if (res.ok) {\n                const mailer = await res.json();\n                if (type === \"RESEND\" && mailer.success) {\n                } else return mailer;\n            } else {\n                throw new Error(\"ON OTP_SEND: Bad response from server\");\n            }\n        } catch (error) {\n            console.log(\"Oops! Unable to send OTP.\");\n            return error\n        }\n    };\n\n    const onSubmit = async ({ email, password, remember }: SignInFormData) => {\n        try {\n            let res = await fetch(\n                process.env.NEXT_PUBLIC_API_URL + \"/api/checkloginerror\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json;charset=utf-8\",\n                    },\n                    body: JSON.stringify({ email: email, password: password, remember: remember }),\n                }\n            );\n            if (res.ok) {\n                const { success, error } = await res.json();\n                if (!!success) {\n                    enqueueSnackbar(\"Welcome to COMETLABS\", { variant: \"success\" })\n                    NextAuth.signIn(\"credentials\", {\n                        username: email,\n                        password: password,\n                        callbackUrl: (process.env.NEXT_PUBLIC_AUTH_CALLBACK_URL)\n                    })\n                } else {\n                    enqueueSnackbar(error, { variant: \"error\" })\n                }\n            } else {\n                throw new Error(\"SOME ERROR OCCURRED: ERROR\");\n            }\n\n        }\n        catch (error) {\n            enqueueSnackbar(\"Some error occurred\", { variant: \"error\" });\n        }\n    };\n\n    const handleOtp = () => {\n        return (\n            async () => {\n                let options = {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json;charset=utf-8\",\n                    },\n                    body: JSON.stringify({ email: email, otp: otp }),\n                };\n\n                try {\n                    let res = await fetch(\n                        process.env.NEXT_PUBLIC_API_URL + \"/api/verifyotp\",\n                        options\n                    );\n                    if (res.ok) {\n                        const verified = await res.json();\n                        if (!!verified.temporaryToken) {\n                            setauthToken(verified.temporaryToken);\n                            enqueueSnackbar(\"OTP verified\", { variant: \"success\" });\n                            setPassword(true)\n                        } else {\n                            throw new Error(\"ON OTP_VERIFICATION: NO TEMP\");\n                        }\n                    } else {\n                        throw new Error(\"ON OTP_VERIFICATION: Bad response from server\");\n                    }\n                } catch (error) {\n                    enqueueSnackbar(\"Couldn't verify OTP\", { variant: \"error\" });\n                }\n                setOtp(\"\");\n            }\n        )\n    }\n\n    return (\n        <Container component=\"main\" sx={{\n            position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        }}>\n            <CardContainer sx={{ pb: \"20px\", width: \"100%\", border: 0, backgroundColor: \"tempcolor.main\" }}>\n                <Grid container sx={{\n                    marginTop: 5,\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    width: \"100%\",\n                }}>\n                    <Grid item md={6}>\n                        {!forgot ? (\n                            <>\n                                <Typography variant=\"TitleLarge\" paragraph sx={{ mb: 0 }}>\n                                    Sign In\n                                </Typography>\n                                <Typography variant=\"BodyLarge\">\n                                    {\"Don't have   account? \"}\n                                    <Link href={InternalLinks.SIGNUP_PAGE} variant=\"BodyLarge\">\n                                        Sign Up\n                                    </Link>\n                                </Typography>\n                                <Box component=\"form\" sx={{ mt: 3 }} onSubmit={handleSubmit(onSubmit)} noValidate>\n                                    <Controller\n                                        name=\"email\"\n                                        control={control}\n                                        defaultValue=\"\"\n                                        rules={{\n                                            required: \"Email required\",\n                                            pattern: {\n                                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                                message: \"Invalid email\",\n                                            },\n                                        }}\n                                        render={({ field, fieldState: { error } }) => (\n                                            <TextField\n                                                margin=\"normal\"\n                                                required\n                                                fullWidth\n                                                id=\"email\"\n                                                label=\"Email Address\"\n                                                autoComplete=\"email\"\n                                                inputProps={{\n                                                    style: {\n                                                        fontWeight: 400,\n                                                        fontSize: \"16px\",\n                                                        lineHeight: \"24px\",\n                                                    }\n                                                }}\n                                                InputLabelProps={{\n                                                    style: {\n                                                        fontWeight: 500,\n                                                        fontSize: \"14px\",\n                                                        lineHeight: \"20px\",\n                                                    }\n                                                }}\n                                                autoFocus\n                                                error={!!error}\n                                                helperText={error ? error.message : null}\n                                                {...field}\n                                                ref={null}\n                                            />\n                                        )}\n                                    />\n                                    <Controller\n                                        name=\"password\"\n                                        control={control}\n                                        defaultValue=\"\"\n                                        rules={{\n                                            required: \"Password required\",\n                                            minLength: {\n                                                value: 8,\n                                                message: \"Password must be at least 8 characters\",\n                                            },\n                                        }}\n                                        render={({ field, fieldState: { error } }) => (\n                                            <TextField\n                                                margin=\"normal\"\n                                                required\n                                                fullWidth\n                                                label=\"Password\"\n                                                type={values.showPassword ? \"text\" : \"password\"}\n                                                id=\"password\"\n                                                autoComplete=\"current-password\"\n                                                error={!!error}\n                                                inputProps={{\n                                                    style: {\n                                                        fontWeight: 400,\n                                                        fontSize: \"16px\",\n                                                        lineHeight: \"24px\",\n                                                    }\n                                                }}\n                                                InputLabelProps={{\n                                                    style: {\n                                                        fontWeight: 500,\n                                                        fontSize: \"14px\",\n                                                        lineHeight: \"20px\",\n                                                    }\n                                                }}\n                                                InputProps={{\n                                                    endAdornment: (\n                                                        <InputAdornment position=\"end\">\n                                                            <IconButton\n                                                                aria-label=\"toggle password visibility\"\n                                                                onClick={handleClickShowPassword}\n                                                                edge=\"end\"\n                                                            >\n                                                                {values.showPassword ? <MdOutlineVisibilityOff /> : <MdOutlineVisibility />}\n                                                            </IconButton>\n                                                        </InputAdornment>\n                                                    )\n                                                }}\n                                                helperText={error ? error.message : null}\n                                                {...field}\n                                                ref={null}\n                                            />\n                                        )}\n                                    />\n                                    <div style={{ margin: \"34px auto\" }}>\n                                        <Typography color=\"primary\" variant=\"LabelSmall\" sx={{ cursor: 'pointer', textDecoration: 'underline' }} onClick={() => { setForgot(true) }}>\n                                            Forgot password?\n                                        </Typography>\n                                    </div>\n                                    <Stack direction=\"row\" sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                                        <FilledButton\n                                            type=\"submit\"\n                                            variant=\"contained\"\n                                            disabled={isSubmitting}\n                                        >\n                                            <Typography variant=\"LabelMedium\">\n                                                {isSubmitting ? \"Signing you in...\" : \"Sign In\"}\n                                            </Typography>\n                                        </FilledButton>\n                                    </Stack>\n                                    <Divider sx={{ mt: \"34px\", mb: \"28px\" }} color=\"onsurfacevariant.main\">\n                                        <Typography variant=\"LabelLarge\">Or Sign up with</Typography>\n                                    </Divider>\n                                    <Providers providers={providers} />\n                                </Box>\n                            </>\n                        ) : (\n                            <>\n                                <div>\n                                    <Typography variant=\"TitleLarge\">\n                                        Reset Password\n                                    </Typography>\n                                    <div style={{ marginBottom: \"24px\" }}>\n                                        <Typography variant=\"BodyLarge\">\n                                            Or\n                                        </Typography>\n                                        <Typography sx={{ ml: 1, cursor: 'pointer', textDecoration: \"underline\" }} color=\"primary\" onClick={(e) => { setForgot(false), e.preventDefault(); }} variant=\"BodyLarge\">\n                                            Sign In\n                                        </Typography>\n                                    </div>\n                                </div>\n                                <Box>\n                                    {/* <Controller\n                                        name=\"email\"\n                                        control={control}\n                                        rules={{\n                                            required: \"Email required\",\n                                            pattern: {\n                                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                                message: \"Invalid email\",\n                                            },\n                                        }}\n                                        render={({ field, fieldState: { error } }) => { */}\n                                    {/* return ( */}\n                                    <TextField\n                                        margin=\"normal\"\n                                        required\n                                        fullWidth\n                                        id=\"email\"\n                                        inputProps={{\n                                            style: {\n                                                fontWeight: 400,\n                                                fontSize: \"16px\",\n                                                lineHeight: \"24px\",\n                                            },\n                                            pattern: {\n                                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                                                message: \"Invalid email\",\n                                            },\n                                        }}\n                                        InputLabelProps={{\n                                            style: {\n                                                fontWeight: 500,\n                                                fontSize: \"14px\",\n                                                lineHeight: \"20px\",\n                                            }\n                                        }}\n                                        onChange={(e) => { setForgetEmail(e.target.value) }}\n                                        InputProps={{\n                                            endAdornment: (\n                                                <OutlinedButton\n                                                    color=\"primary\"\n                                                    variant=\"outlined\"\n                                                    sx={{ borderRadius: \"4px\" }}\n                                                    onClick={() => { onForgotSubmit(forgetEmail!) }}\n                                                >\n                                                    <Typography variant=\"LabelMedium\">GenerateOTP</Typography>\n                                                </OutlinedButton>\n                                            ),\n                                        }}\n                                        label=\"Email Address\"\n                                        autoComplete=\"email\"\n                                        autoFocus\n                                        // error={!!error}\n                                        // helperText={error ? error.message : null}\n                                        // {...field}\n                                        ref={null}\n                                    />\n                                    {/* ) */}\n                                    {/* }}\n                                    /> */}\n                                    <TextField\n                                        margin=\"normal\"\n                                        required\n                                        fullWidth\n                                        label=\"Enter OTP\"\n                                        type=\"number\"\n                                        disabled={!emailstatus}\n                                        inputProps={{\n                                            style: {\n                                                fontWeight: 400,\n                                                fontSize: \"16px\",\n                                                lineHeight: \"24px\",\n                                            }\n                                        }}\n                                        InputLabelProps={{\n                                            style: {\n                                                fontWeight: 500,\n                                                fontSize: \"14px\",\n                                                lineHeight: \"20px\",\n                                            }\n                                        }}\n                                        onChange={(e) => { setOtp(e.target.value) }}\n                                        InputProps={{\n                                            endAdornment: (\n                                                <TextButton\n                                                    color=\"primary\"\n                                                    disabled={!emailstatus}\n                                                    onClick={handleOtp}\n                                                >\n                                                    <Typography variant=\"LabelMedium\">Submit</Typography>\n                                                </TextButton>\n                                            ),\n                                        }}\n                                        ref={null}\n                                    />\n                                </Box>\n                            </>\n                        )}\n                    </Grid>\n                </Grid>\n            </CardContainer>\n        </Container>\n    )\n}\n\nexport default SigninArea"],"names":["InternalLinks","LANDING_PAGE","SIGNIN_PAGE","SIGNUP_PAGE","ONBOARDING_PAGE","DEV_DASHBOARD","USER_DASHBOARD","ADMIN_DASHBOARD","EXPLORE_PAGE","ORGANISE_PAGE","LABS_PAGE","CODEARENA_DASHBOARD_LINK","CODEARENA_DASHBOARD_ROUTE","CODEARENA_EDITCODEARENA","CODEARENA_PREVIEW","HACK_DASHBOARD_LINK","HACK_DASHBOARD_ROUTE","HACK_EDITHACK","HACK_EDITHACK_ROUTE","HACK_PREVIEW","BLOGS_PAGE","CAREERS_PAGE","COMPANY_PAGE","CONTACT_US_PAGE","REVIEWS_PRESS_PAGE","TERMS_PRIVACY_PAGE","TERMS_CONDITIONS_PAGE","HIRE_DEVS_PAGE","OUTSOURCE_PAGE","PRICING_PAGE","SPONSOR_PAGE","EXTENSIONS_PAGE","CHANGE_LOG_PAGE","PLAYGROUND_PAGE","REQUEST_FEATURE_PAGE","STATUS_PAGE","COMET_PROFILE_PAGE","COMMUNITY_PAGE","EVANGELISTS_PAGE","GET_HIRED_PAGE","PROFILE_PAGE","externalLinkProps","target","rel","ExternalLinks","href","COMETLABS_FACEBOOK","COMETLABS_INSTAGRAM","COMETLABS_LINKEDIN","COMETLABS_TWITTER","COMETLABS_LINKTREE","COMETLABS_YOUTUBE","MainArea_Providers","param","providers","getIcon","name","jsx_runtime","jsx","SiGoogle","fontSize","SiGithub","Stack","direction","columnGap","sx","mb","justifyContent","Object","values","map","providerId","String","provider","toLowerCase","IconButton","onClick","NextAuth","color","aria-label","SigninArea","setPassword","setauthToken","handleSubmit","control","formState","isSubmitting","useForm","enqueueSnackbar","useSnackbar","forgot","setForgot","React","emailstatus","setEmailstatus","email","setEmail","otp","setOtp","forgetEmail","setForgetEmail","setValues","password","showPassword","handleClickShowPassword","onForgotSubmit","error","forgototp","variant","data","type","res","fetch","process","method","headers","body","JSON","stringify","ok","mailer","json","success","console","log","onSubmit","remember","username","callbackUrl","handleOtp","options","verified","temporaryToken","Container","component","position","top","left","transform","display","flexDirection","alignItems","CardContainer","pb","width","border","backgroundColor","Grid","container","marginTop","item","md","jsxs","Fragment","div","Typography","style","marginBottom","ml","cursor","textDecoration","e","preventDefault","Box","TextField","margin","required","fullWidth","id","inputProps","fontWeight","lineHeight","pattern","value","message","InputLabelProps","onChange","InputProps","endAdornment","OutlinedButton","borderRadius","label","autoComplete","autoFocus","ref","disabled","TextButton","paragraph","Link","mt","noValidate","Controller","defaultValue","rules","render","field","fieldState","helperText","minLength","InputAdornment","edge","MdOutlineVisibilityOff","MdOutlineVisibility","FilledButton","Divider","Providers","MainArea_SigninArea"],"sourceRoot":""}