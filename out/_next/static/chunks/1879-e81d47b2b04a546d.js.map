{"version":3,"file":"static/chunks/1879-e81d47b2b04a546d.js","mappings":"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","sources":["webpack://_N_E/./src/components/Fest/Dashboard/Submission/Details.tsx","webpack://_N_E/./src/components/Fest/Dashboard/Submission/SubmissonForm.tsx","webpack://_N_E/./src/components/Fest/Dashboard/Submission/Problems.tsx","webpack://_N_E/./src/components/Fest/Dashboard/Submission/Links.tsx","webpack://_N_E/./src/components/Fest/Dashboard/Submission/index.tsx","webpack://_N_E/./src/components/MainArea/PlaygroundArea.tsx","webpack://_N_E/./node_modules/react-markdown-editor-lite/lib/index.css","webpack://_N_E/./styles/markdown-styles.module.css","webpack://_N_E/./node_modules/uuid/dist/esm-browser/native.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/rng.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://_N_E/./node_modules/uuid/dist/esm-browser/v4.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nimport { Autocomplete, Box, Stack, TextField } from \"@mui/material\";\n// import { HiOutlineCloudUpload, HiOutlineXCircle } from 'react-icons/hi';\nimport { Controller, useFormContext } from 'react-hook-form';\n// import { handleSingleImageUpload } from '@/backend/functions';\nimport { Details, Problem } from \"./SubmissonForm\";\n// import Dropzone from '@/components/Dropzone';\n// import Image from 'next/image';\n// import { Teamm } from '../CreateTeam';\n// import { CardContainer } from '@/styles/theme';\n// import { useSession } from \"next-auth/react\";\n// import { DefaultUser } from \"@/backend/functions\";\n// import { Accept } from 'react-dropzone'\nimport { type } from '@/components/User/Dashboard/types';\nexport interface ReadOnly {\n  readOnly?: boolean;\n}\n\nexport interface DetailsProps {\n  details?: Details;\n  problems?: Problem;\n}\n\nconst Details = ({ details }: DetailsProps\n  // team: Teamm\n) => {\n  // const { data: session } = useSession()\n  const { setValue } = useFormContext();\n\n  const [data, setData] = React.useState<type[]>([]);\n  const [text, setText] = React.useState(\"A\");\n\n  React.useEffect(() => {\n    fetch(process.env.NEXT_PUBLIC_API_URL + \"/fests/getTechnology\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify({ name: text })\n    })\n      .then(async (res) => res.json())\n      .then((json) => {\n        setData(json);\n        // console.log(data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [text]);\n\n  console.log(details)\n\n\n\n  // const handleUpload = async (acceptedFiles: Array<File>) => {\n  //   const user: DefaultUser = session?.user as DefaultUser;\n  //   const accessToken = \"Token \" + user.accessToken\n  //   const imageUrl = await handleSingleImageUpload(\n  //     team.team_id,\n  //     acceptedFiles[0],\n  //     accessToken\n  //   );\n  //   if (!!imageUrl) {\n  //     setValue(\"details.imageUrl\", imageUrl);\n  //   } else {\n  //     alert(\"Image Upload Error\");\n  //   }\n  // };\n\n  return (\n    <Stack rowGap={2} sx={{ pb: \"20px\", width: \"100%\" }}>\n      <Box>\n        {/* { editDetails ? ( */}\n        <Controller\n          name=\"details.title\"\n          defaultValue={(details && details.title) || \"\"}\n          render={({ field: { ref, ...field }, fieldState: { error } }) => (\n            <TextField\n              fullWidth\n              required\n              variant=\"outlined\"\n              placeholder={(details && details.title) || \"Product Title\"}\n              error={!!error}\n              inputProps={{\n                style: {\n                  fontWeight: 400,\n                  fontSize: \"16px\",\n                  lineHeight: \"24px\",\n                }\n              }}\n              InputLabelProps={{\n                style: {\n                  fontWeight: 500,\n                  fontSize: \"14px\",\n                  lineHeight: \"20px\",\n                }\n              }}\n              helperText={error ? error.message : null}\n              {...field}\n            />\n          )}\n        />\n        {/* ) : (\n                    <Typography variant=\"subtitle1\">{details.title}</Typography>\n                )} */}\n      </Box>\n      <Box>\n        <Controller\n          name=\"details.subtitle\"\n          defaultValue={(details && details.subtitle)}\n          render={({ field: { ref, ...field }, fieldState: { error } }) => (\n            <TextField\n              fullWidth\n              required\n              variant=\"outlined\"\n              placeholder={(details && details.subtitle) || \"Product Description\"}\n              error={!!error}\n              inputProps={{\n                style: {\n                  fontWeight: 400,\n                  fontSize: \"16px\",\n                  lineHeight: \"24px\",\n                }\n              }}\n              InputLabelProps={{\n                style: {\n                  fontWeight: 500,\n                  fontSize: \"14px\",\n                  lineHeight: \"20px\",\n                }\n              }}\n              helperText={error ? error.message : null}\n              {...field}\n            />\n          )}\n        />\n      </Box>\n      <Box>\n        {/* <Typography paragraph variant=\"LabelLarge\">What are the technologies you are gonna use?</Typography> */}\n        {/* <Controller\n          name=\"problem.tags\"\n          render={() => ( */}\n        <Autocomplete\n          //   multiple\n          //   getOptionLabel={(data) => data.name}\n          //   options={data}\n          //   defaultValue={Problems!.tags}\n          //   value={Problems!.tags}\n          //   onChange={(_e, value) => {\n          //     // value.forEach((val))\n          //     setValue(\"problem.tags\", ...value)\n          //     // skills = value;\n          //     console.log(...problem.tags)\n          //   }}\n          //   isOptionEqualToValue={(option, value) => option.name === value.name}\n          //   renderInput={(params) => {\n          //     if (((params.inputProps as any).value) !== \"\") {\n          //       setText((params.inputProps as any).value);\n          //     }\n          //     return (\n          //       <TextField {...params}\n          //         label=\"What are the technologies you are gonna use?\"\n          //         placeholder=\"Type Tags\" variant='outlined' />\n          //     );\n          //   }\n          //   }\n          // />\n          multiple\n          getOptionLabel={(data) => data.name}\n          options={data}\n          onChange={(_e, value) => {\n            // value.forEach((val))\n            setValue(\"details.tags\", [\n              ...value\n            ])\n          }}\n          // defaultValue={Details!.tags}\n          isOptionEqualToValue={(option, value) => option.name === value.name}\n          renderInput={(params) => {\n            if (((params.inputProps as any).value) !== \"\") {\n              setText((params.inputProps as any).value);\n            }\n            return (\n              <TextField {...params}\n                label=\"Technologies\" placeholder=\"Type Tags\" variant='standard' />\n            );\n          }\n          }\n        />\n        {/* <Autocomplete\n                multiple\n                value={problem.tags || []}\n                isOptionEqualToValue={(option: Technology, value: Technology) => {\n                    return option.name === value.name;\n                }}\n                id=\"tech-skills-input\"\n                onChange={(_e: any, value: Technology[]) => {\n                    onChange(value);\n                }}\n                sx={{ mt: 1.5 }}\n                options={FestecTechnologies}\n                getOptionLabel={(option) => option.name}\n                renderTags={(tagValue, getTagProps) =>\n                    tagValue.map((option, index) => (\n                        <Tag\n                            label={option.name}\n                            {...getTagProps({ index })}\n                            key={index + \"-skill-\" + option.name}\n                        />\n                    ))\n                }\n                renderInput={(params) => (\n                    <TextField\n                        {...params}\n                        label=\"Technologies used\"\n                        placeholder=\"Select the technologies used\"\n                        inputProps={{\n                            style: {\n                                fontWeight: 400,\n                                fontSize: \"16px\",\n                                lineHeight: \"24px\",\n                            }\n                        }}\n                        InputLabelProps={{\n                            style: {\n                                fontWeight: 500,\n                                fontSize: \"14px\",\n                                lineHeight: \"20px\",\n                            }\n                        }}\n                        size=\"small\"\n                        fullWidth\n                    />\n                )}\n            />\n          )}\n        /> */}\n      </Box>\n      {/* <Box>\n        <CardContainer\n          sx={{\n            height: 340,\n            display: \"flex\",\n            position: \"relative\",\n            overflow: \"hidden\",\n\n          }}\n        >\n          {!!details.imageUrl ? (\n            <>\n              <IconButton\n                size=\"small\"\n                color=\"secondary\"\n                sx={{\n                  position: \"absolute\",\n                  top: \"12px\",\n                  right: \"12px\",\n                  zIndex: 10,\n                }}\n                onClick={() => setValue(\"details.imageUrl\", \"\")}\n              >\n                <HiOutlineXCircle />\n              </IconButton>\n              <Image\n                src={details.imageUrl}\n                layout=\"fill\"\n                objectFit={\"cover\"}\n                alt={\"Uploaded Poster\"}\n              />\n            </>\n          ) : (\n            <Dropzone\n              multiple={false}\n              accept={\"image/jpeg, image/jpg, image/png\" as unknown as Accept}\n              maxFiles={1}\n              onDrop={handleUpload}\n            >\n              <Stack sx={{ mb: 1 }} alignItems=\"center\" spacing={2}>\n                <HiOutlineCloudUpload fontSize=\"3rem\" />\n                <Typography variant=\"LabelLarge\">\n                  Drop poster here or click to Browse\n                </Typography>\n                <Typography variant=\"LabelLarge\">\n                  Accepts images (Png, Jpeg, Jpg) of dimension 640×360 or larger\n                  upto 1Mb\n                </Typography>\n              </Stack>\n            </Dropzone>\n          )}\n        </CardContainer>\n      </Box> */}\n    </Stack>\n  );\n}\n\n\n\nexport default Details;","import { useSession } from \"next-auth/react\";\nimport { FC } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useSnackbar } from \"notistack\";\nimport { DefaultUser } from \"@/backend/functions\";\nimport { Technology } from \"@/content/Technology\";\nimport { Teamm } from \"../CreateTeam\";\nimport * as React from 'react';\n// import { useRouter } from \"next/router\";\n\nexport interface Details {\n  title: string;\n  subtitle: string;\n  tags: Technology[];\n}\n\nexport interface Problem {\n  description: string;\n  solution: string;\n}\n\nexport interface Links {\n  deployment: string;\n  github: string;\n  video: string;\n}\n\nexport interface SubmissionData {\n  id: string;\n  details: Details;\n  problem: Problem;\n  link: Links;\n  team?: Teamm;\n}\n\ninterface Submit {\n  data: SubmissionData;\n  id: string;\n  team: Teamm;\n  setOpen?: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst SubmissionFormProvider: FC<Submit> = ({ children, team, id, setOpen, data }) => {\n  let formState: SubmissionData = data;\n  const { data: session } = useSession();\n  // const router = useRouter();\n  const user: DefaultUser = session?.user as DefaultUser;\n  const { enqueueSnackbar } = useSnackbar();\n\n  if (typeof window !== \"undefined\") {\n    const autoSavedSubmissionData = JSON.parse(\n      String(localStorage.getItem(\"autoSavedSubmissionData\"))\n    ) as SubmissionData;\n    formState = !!data\n      ? { ...DEFAULT, ...autoSavedSubmissionData, ...data }\n      : { ...DEFAULT, ...autoSavedSubmissionData };\n  }\n\n  const methods = useForm({\n    mode: \"onChange\",\n    defaultValues: formState,\n  });\n\n  methods.watch((data) => {\n    if (typeof window !== \"undefined\") {\n      localStorage.setItem(\"autoSavedSubmissionData\", JSON.stringify(data));\n    }\n  });\n\n  const handleSubmissionFormSubmit = async (data: SubmissionData) => {\n    const Submission: SubmissionData = {\n      id: team.team_id,\n      details: data.details,\n      problem: data.problem,\n      link: data.link\n    };\n    try {\n      const accessToken = \"Token \" + user.accessToken;\n      let res = await fetch(\n        process.env.NEXT_PUBLIC_API_URL + \"/organize/createSubmission\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json;charset=utf-8\",\n            Authorization: accessToken,\n          },\n          body: JSON.stringify({ submission: Submission, team_id: team.team_id, eventId: id }),\n        }\n      );\n      if (res.ok) {\n        const { success, error } = await res.json();\n        if (!!success) {\n          enqueueSnackbar(\"Submission Updated!!\", { variant: \"success\" });\n          localStorage.setItem(\"submission\", JSON.stringify(Submission));\n          localStorage.removeItem(\"autoSavedSubmissionData\");\n          setOpen && setOpen(true);\n          // window.location.href = `https://cometlabs.in/lab/${Submission.playground}/${user.username}/h/${id}`\n          // https://cometlabs.in/lab/react/shivam@cometlabs.in/f/db39cb21-3e9a-468b-9d3f-d23dbb640436\n        } else {\n          enqueueSnackbar(error, { variant: \"error\" });\n        }\n      } else {\n        throw new Error(\"ON Submission DETAIL SAVE: ERROR\");\n      }\n    } catch (error) {\n      console.log(\"Submission details could not be saved\");\n    }\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <form\n        onSubmit={methods.handleSubmit((data: SubmissionData) =>\n          handleSubmissionFormSubmit(data)\n        )}\n      >\n        {children}\n      </form>\n    </FormProvider>\n  );\n};\n\nexport default SubmissionFormProvider;\n\nexport const DEFAULT: SubmissionData = {\n  id: \"\",\n  details: {\n    title: \"\",\n    subtitle: \"\",\n    tags: [],\n  },\n  problem: {\n    description: \"\",\n    solution: \"\",\n  },\n  link: {\n    deployment: \"\",\n    github: \"\",\n    video: \"\",\n  },\n};\n","\nimport * as React from 'react';\nimport { Box, Skeleton, Stack, Typography, } from \"@mui/material\";\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { Problem } from \"./SubmissonForm\";\nimport ReactMarkdown from 'react-markdown';\nimport dynamic from 'next/dynamic';\nimport style from \"@/styles/markdown-styles.module.css\";\nimport \"react-markdown-editor-lite/lib/index.css\";\n// import { type } from '@/components/User/Dashboard/types';\n\nconst Editor = dynamic(() => import(\"react-markdown-editor-lite\"), {\n    loading: () => <Skeleton height={350} width={\"100%\"} />,\n});\n\nexport interface ProblemProps {\n    Problems?: Problem;\n}\n\nconst Problem = ({ Problems }: ProblemProps) => {\n    const { watch } = useFormContext();\n    const problem: Problem = watch(\"problem\");\n\n    // const [data, setData] = React.useState<type[]>(problem.tags);\n    // const [text, setText] = React.useState(\"A\");\n\n    // React.useEffect(() => {\n    //     fetch(process.env.NEXT_PUBLIC_API_URL + \"/fests/getTechnology\", {\n    //         method: \"POST\",\n    //         headers: {\n    //             \"Content-Type\": \"application/json;charset=utf-8\"\n    //         },\n    //         body: JSON.stringify({ name: text })\n    //     })\n    //         .then(async (res) => res.json())\n    //         .then((json) => {\n    //             setData(json);\n    //             // console.log(data);\n    //         })\n    //         .catch((err) => {\n    //             console.log(err);\n    //         });\n    // }, [text]);\n\n    return (\n        <Stack rowGap={2} sx={{ pb: \"20px\", width: \"100%\" }}>\n            {/* <Box>\n                <Typography variant=\"LabelLarge\">What Problem statement your hack solves?</Typography>\n                <Controller\n                    name=\"problem.statement\"\n                    defaultValue={problem.statement || \"\"}\n                    rules={{\n                        required: \"Please provide a title for your submission\",\n                    }}\n                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                        <TextField\n                            fullWidth\n                            variant=\"outlined\"\n                            placeholder=\"Enter Submission title\"\n                            error={!!error}\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            helperText={error ? error.message : null}\n                            {...field}\n                        />\n                    )}\n                />\n            </Box> */}\n            <Box>\n                <Typography variant=\"LabelLarge\">Describe the Problem that your Product solves</Typography>\n                <Controller\n                    name=\"problem.description\"\n                    defaultValue={problem.description || ''}\n                    render={({ field }) => {\n                        return (\n                            <Box sx={{ mt: 2, mb: 2 }}>\n                                <Editor\n                                    placeholder={(Problems && Problems.description) || \"Problem Statement\"}\n                                    style={{ height: 300 }}\n                                    value={field.value}\n                                    renderHTML={(text: string) => {\n                                        field.onChange(text);\n                                        return (\n                                            <Typography variant=\"BodyMedium\" className=\"content\">\n                                                <ReactMarkdown className={style.reactMarkDown}>\n                                                    {text}\n                                                </ReactMarkdown>\n                                            </Typography>\n                                        );\n                                    }}\n                                />\n                            </Box>\n                        );\n                    }}\n                />\n            </Box>\n            <Box>\n                <Typography variant=\"LabelLarge\">What is the proposed solution?</Typography>\n                <Controller\n                    name=\"problem.solution\"\n                    defaultValue={problem.solution || ''}\n                    render={({ field }) => {\n                        return (\n                            <Box sx={{ mt: 2, mb: 2 }}>\n                                <Editor\n                                    placeholder={(Problems && Problems.solution) || \"Proposed Solution\"}\n                                    style={{ height: 300 }}\n                                    value={field.value}\n                                    renderHTML={(text: string) => {\n                                        field.onChange(text);\n                                        return (\n                                            <Typography variant=\"BodyMedium\" className=\"content\">\n                                                <ReactMarkdown className={style.reactMarkDown}>\n                                                    {text}\n                                                </ReactMarkdown>\n                                            </Typography>\n                                        );\n                                    }}\n                                />\n                            </Box>\n                        );\n                    }}\n                />\n            </Box>\n            {/* <Box>\n                <Typography variant=\"LabelLarge\">Please Enter title here</Typography>\n                <Controller\n                    name=\"problem.problemfaced\"\n                    defaultValue={problem.problemfaced || \"\"}\n                    rules={{\n                        required: \"Any problems you faced?\",\n                    }}\n                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                        <TextField\n                            fullWidth\n                            variant=\"outlined\"\n                            placeholder=\"Any Problems you faced?\"\n                            error={!!error}\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            helperText={error ? error.message : null}\n                            {...field}\n                        />\n                    )}\n                />\n            </Box> */}\n            {/* <Box>\n                <Typography variant=\"LabelLarge\">Any improvements that you want to do?</Typography>\n                <Controller\n                    name=\"problem.improvements\"\n                    defaultValue={problem.improvements || \"\"}\n                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                        <TextField\n                            fullWidth\n                            variant=\"outlined\"\n\n                            placeholder=\"Any other improvements you have in mind?\"\n                            error={!!error}\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            multiline\n                            helperText={error ? error.message : null}\n                            {...field}\n                        />\n                    )}\n                />\n            </Box> */}\n        </Stack>\n    )\n}\n\n\nexport default Problem;","\nimport * as React from 'react';\nimport { Stack, TextField, Typography, } from \"@mui/material\";\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { Links } from \"./SubmissonForm\";\n\nexport interface LinksProps {\n    Links?: Links;\n}\n\nconst Links = ({ Links }: LinksProps) => {\n    const { watch } = useFormContext();\n    const link: Links = watch(\"link\");\n\n    return (\n        <Stack rowGap={2} sx={{ pb: \"20px\", width: '100%' }}>\n            <div>\n                <Typography variant=\"LabelLarge\">\n                    Github repository link\n                </Typography>\n                <Controller\n                    name=\"link.github\"\n                    defaultValue={link && link.github}\n                    rules={{\n                        pattern: {\n                            value:\n                                /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi,\n                            message: \"Please enter a valid URL\",\n                        },\n                    }}\n                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                        <TextField\n                            placeholder={(Links && Links!.github) || \"eg, https://www.github.com/myproject\"}\n                            fullWidth\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            error={!!error}\n                            variant=\"outlined\"\n                            {...field}\n                        />\n                    )}\n                />\n            </div>\n            <div>\n                <Typography variant=\"LabelLarge\">\n                    Deployment link\n                </Typography>\n                <Controller\n                    name=\"link.deployment\"\n                    defaultValue={(link && link.deployment)}\n                    rules={{\n                        pattern: {\n                            value:\n                                /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi,\n                            message: \"Please enter a valid URL\",\n                        },\n                    }}\n                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                        <TextField\n                            placeholder={(Links && Links!.deployment) || \"eg, https://myproject.vercel.app\"}\n                            fullWidth\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            error={!!error}\n                            {...field}\n                        />\n                    )}\n                />\n            </div>\n            {/* <Box>\n                <Typography variant=\"LabelLarge\">\n                    Demo Video URL\n                </Typography>\n                <Controller\n                    name=\"link.video\"\n                    defaultValue={link && link.video}\n                    rules={{\n                        pattern: {\n                            value:\n                                /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi,\n                            message: \"Please enter a valid URL\",\n                        },\n                    }}\n                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                        <TextField\n                            placeholder={(Links && Links!.video) || \"Enter or Paste a valid Video URL\"}\n                            fullWidth\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            error={!!error}\n                            // variant=\"standard\"\n                            {...field}\n                        />\n                    )}\n                />\n            </Box> */}\n        </Stack>\n    );\n}\n\nexport default Links;","import * as React from 'react';\nimport { Stack, Box, Typography, Grid, styled, Paper, Modal } from \"@mui/material\";\nimport Details from \"./Details\";\nimport SubmissionFormProvider, { SubmissionData } from \"./SubmissonForm\";\n// import { AiOutlineSave } from 'react-icons/ai';\nimport { Teamm } from '../CreateTeam';\nimport Problems from './Problems';\nimport Links from './Links';\nimport PlayArea from '@/components/MainArea/PlaygroundArea';\nimport { FilledButton } from '@/styles/theme';\n// import { SiGithub } from 'react-icons/si';\n// import { HiOutlineLink } from 'react-icons/hi';\nimport Image from \"next/image\";\nimport { CodeArena } from '@/components/event/types';\nimport { ReadOnly } from '../../types';\n\ninterface Submit extends ReadOnly {\n    props: SubmissionData;\n    team: Teamm;\n    id: string;\n    user: string;\n    hack?: boolean;\n    fest: CodeArena;\n    type: string\n}\n\n\nconst Submission = ({ team, props, id, user, fest, type }: Submit) => {\n    const disabled = team ? false : true;\n    const time = Date.now() > new Date(fest.details.startDate).getTime();\n    // const [playground, setPlayground] = React.useState<string>('react');\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Box sx={{ width: \"100%\" }}>\n            <SubmissionFormProvider data={props} team={team} id={id} setOpen={setOpen}>\n                {disabled ? (\n                    <>\n                        <Typography variant=\"LabelLarge\" sx={{\n                            height: \"80vh\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}>Create team to continue</Typography>\n                    </>\n                ) : (\n                    time ? (\n                        <>\n                            <Stack spacing={2} sx={{ margin: \"20px 5vw 0 50px\" }}>\n                                <div><Typography paragraph variant=\"LabelLarge\">{user}</Typography>\n                                    <Typography paragraph variant=\"TitleLarge\">{fest.details.title} organizers require following details about the {fest.type} for evaluation.</Typography>\n                                </div>\n                                <Box sx={{ display: 'flex' }}>\n                                    <Typography sx={{ width: \"20%\" }} variant=\"LabelLarge\">Product</Typography>\n                                    <Details details={props && props.details} problems={props && props.problem}\n                                    //  {...team}\n                                    />\n                                </Box>\n                                <Box sx={{ display: 'flex' }}>\n                                    <Typography sx={{ width: \"20%\" }} variant=\"LabelLarge\">Problem Details</Typography>\n                                    <Problems Problems={props && props.problem} />\n                                </Box>\n                                {fest.type != \"CodeArena\" &&\n                                    <Box sx={{ display: \"flex\", alignContent: \"center\" }}>\n                                        <Typography sx={{ width: \"20%\" }} variant=\"LabelLarge\">Links</Typography>\n                                        <Links Links={props && props.link} />\n                                    </Box>\n                                }\n                                {\n                                    (type != \"Hackathon\") &&\n                                    <Box sx={{ display: \"flex\" }}>\n                                        <Typography sx={{ width: \"20%\" }} variant=\"LabelLarge\">CodeArena Environment</Typography>\n                                        <PlayArea />\n                                    </Box>\n                                }\n                            </Stack>\n                            <Box sx={{ width: \"100%\", mb: 2 }}>\n                                <FilledButton\n                                    variant=\"contained\"\n                                    type=\"submit\"\n                                    sx={{ display: \"flex\", justifyContent: \"center\", m: \"auto\" }}\n                                >\n                                    <Typography variant=\"LabelLarge\" sx={{ fontWeight: 500 }}>Save and Continue</Typography>\n                                </FilledButton>\n                                <Modal open={open} onClose={() => setOpen(false)}>\n                                    <Grid container>\n                                        <Grid item sx={{ borderRadius: \"4px\", textAlign: \"center\", position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\", justifyContent: \"space-between\", alignContent: \"center\", width: { xs: \"80%\", sm: \"70%\", md: \"50%\" } }}>\n                                            <CardContainer elevation={0} sx={{ p: 3, pb: { md: 7, xs: 4 }, width: \"100%\" }}>\n                                                <Typography paragraph sx={{ mb: 5 }} variant=\"TitleLarge\">Explore COMETLABS</Typography>\n                                                <PlayArea />\n                                                <FilledButton\n                                                    variant=\"contained\"\n                                                    type=\"submit\"\n                                                    sx={{ display: \"flex\", justifyContent: \"center\", m: \"auto\" }}\n                                                    onClick={() => { console.log(props) }}\n                                                >\n                                                    <Typography variant=\"LabelLarge\" sx={{ fontWeight: 500 }}>Continue to Playground</Typography>\n                                                </FilledButton>\n                                            </CardContainer>\n                                        </Grid>\n                                    </Grid>\n                                </Modal>\n                            </Box>\n                        </>\n                    ) : (\n                        <>\n                            <Typography variant=\"LabelLarge\" sx={{\n                                height: \"80vh\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"center\",\n                            }}>Submission Protal will open from {fest.details.startDate}</Typography>\n                        </>\n                    )\n                )\n                }\n            </SubmissionFormProvider>\n        </Box>\n    )\n}\n\n\nexport default Submission;\n\ninterface AllSubmissions {\n    props: SubmissionData[];\n    Title: string;\n}\n\nconst CardContainer = styled(Paper)(({ theme }) => ({\n    width: 320,\n    // minHeight: 457,\n    // padding: \"20px\",\n    margin: \"20px 50px 20px 0\",\n    // border: \"1px solid rgba(255, 255, 255, 0.2)\",\n    border: 0,\n    backgroundColor: theme.palette.newbackground.main,\n}));\n\nconst SubmissionCard = (props: SubmissionData) => {\n    console.log(props);\n    return (\n        <CardContainer sx={{ backgroundColor: \"transparent\", border: \"2px solid\", borderImageSource: \"linear-gradient(180deg, #003B93 0%, rgba(102, 164, 255, 0.1) 100%)\", borderImageSlice: 1, backgroundImage: \"none\" }}>\n            <Box sx={{\n                overflow: \"hidden\",\n                mb: \"20px\"\n            }}>\n                <Image\n                    // src={`https://logo-cover.s3.ap-south-1.amazonaws.com/${props.playground}-cover.png`}\n                    src={`https://logo-cover.s3.ap-south-1.amazonaws.com/react-cover.png`}\n                    alt={\"logo\"}\n                    height={9}\n                    width={16}\n                    layout=\"responsive\"\n                />\n            </Box>\n            <div style={{ margin: \"20px\" }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>\n                    <Typography variant=\"TitleLarge\">{props.details.title}</Typography>\n                </Box>\n                <Typography paragraph variant=\"BodyLarge\" color=\"onsurfacevariant.main\">{props.details.subtitle}</Typography>\n            </div>\n        </CardContainer>\n    )\n}\n\nexport const Allsubmissions = ({ Title, props }: AllSubmissions) => {\n    console.log(props);\n    if (props.length == 0) {\n        return (\n            <div style={{ margin: \"30px\" }}>\n                <Typography paragraph variant=\"TitleLarge\">{Title}</Typography>\n                <Typography paragraph variant=\"TitleMedium\" sx={{ textAlign: 'center' }}>Currently, there are NO Submissions</Typography>\n            </div>\n        )\n    }\n    return (\n        <Box sx={{ m: 2 }}>\n            <Typography variant=\"TitleLarge\">{Title}</Typography>\n            <Grid sx={{ ml: 2 }} container>\n                {props.map((prop) => {\n                    return (\n                        <Grid item key={prop.id}>\n                            <SubmissionCard {...prop} />\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </Box>\n    )\n}","// this component will return playground cards, ready to use anywhere.\nimport { Grid, IconButton, Modal, TextField, Typography } from \"@mui/material\";\nimport { DefaultUser } from \"@/backend/functions\";\nimport * as React from \"react\";\n// import ShowcaseSmall from \"@/components/Carousels/ShowcaseSmall\";\nimport Image from \"next/image\";\nimport { CardContainer, TextButton } from \"@/styles/theme\";\nimport { useRouter } from \"next/router\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from \"react\";\nimport { MdOutlineCancel } from 'react-icons/md';\nimport dynamic from \"next/dynamic\";\n\nconst ModalPlayground = dynamic(() => import('@/components/MainArea/Modals'),\n  { ssr: false }\n);\n\n\ninterface play {\n  plus?: boolean;\n  value?: string;\n}\n\n\nconst PlayArea = ({ plus, value }: play) => {\n  const [user, setUser] = React.useState<DefaultUser>();\n\n\n  React.useEffect(() => {\n    async function foo() {\n      const usr = JSON.parse(window.localStorage.getItem('user') || \"{}\");\n      if (usr) {\n        setUser(usr);\n      }\n    }\n    foo();\n  }, [])\n\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <Grid direction=\"row\" container spacing={2} justifyContent=\"center\">\n        {FestecTracks.map(\n          (festectracks, i) => (festectracks.title.includes(value!) && i < 5 &&\n            <Grid item key={\"pg-\" + i}>\n              <TrackCard\n                // index={i}\n                // labs={labs}\n                user={user}\n                {...festectracks}\n              // sx={{ height: \"200px\", width: \"160px\" }}\n              />\n            </Grid>)\n        )}\n        {plus && <Grid item>\n          <CardContainer sx={{ textAlign: \"center\", p: 2, height: \"80px\", width: \"66px\", border: 0, cursor: \"pointer\" }}\n            onClick={() => { setOpen(true) }} elevation={1}>\n            <Image\n              src=\"/plus.png\"\n              height={34}\n              width={34}\n              alt={\"add-logo\"}\n            />\n            {/* <Typography sx={{ fontWeight: 500, mt: 1 }}>{props.title}</Typography> */}\n          </CardContainer>\n        </Grid>}\n      </Grid>\n      <ModalPlayground open={open} setOpen={setOpen} user={user} />\n      {/* <Modal open={open} onClose={() => setOpen(false)}>\n        <Grid container>\n          <Grid item sx={{ borderRadius: \"4px\", textAlign: \"center\", position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\", justifyContent: \"space-between\", alignContent: \"center\", width: { xs: \"80%\", sm: \"70%\", md: \"50%\" } }}>\n            <CardContainer elevation={0} sx={{ p: 3, pb: { md: 7, xs: 4 }, maxWidth: \"200x\" }}>\n              <Typography paragraph sx={{ mb: 5 }} variant=\"TitleLarge\">Explore COMETLABS</Typography>\n              <Grid direction=\"row\" container spacing={2} justifyContent=\"center\" alignItems=\"center\">\n                {FestecTracks.map(\n                  (festectracks, i) =>\n                    <Grid item key={\"pg-\" + i}>\n                      <TrackCard\n                        // index={i}\n                        user={user}\n                        {...festectracks}\n                      />\n                    </Grid>\n                )}\n              </Grid>\n            </CardContainer>\n          </Grid>\n        </Grid>\n      </Modal> */}\n    </>\n  );\n}\n\n\nexport default PlayArea;\n\ninterface TrackCardProps extends Track {\n  selected?: boolean;\n  sx?: any;\n  user?: DefaultUser | undefined;\n  // index: number,\n  // labs?: Array<LABS>;\n}\n\nexport function TrackCard({ selected, sx, user, ...props }: TrackCardProps) {\n  const router = useRouter();\n  const [open, setOpen] = useState(false);\n  const [name, setName] = useState('MyLab');\n\n  const handleClick = (name: string) => {\n    if (user) {\n      // localStorage.setItem(\"free\", JSON.stringify(`${props.title}-lab`));\n      localStorage.setItem(\"free\", JSON.stringify(name));\n      const link = \"/lab/\" + props.title + \"/\" + user.username + \"/f/\" + uuidv4();\n      if (!user.username) {\n        router.push('/signin')\n      } else {\n        router.push(link)\n      }\n    }\n    else {\n      router.push('/signin')\n    }\n  }\n\n  const handleClose = (_event: string, reason: string) => {\n    if (reason && reason == \"backdropClick\")\n      return;\n    setOpen(false)\n  }\n\n  function capitalizeFirstLetter(string: string) {\n    const str = string.replace(\"-t\", \"-T\");\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  function capitalizeLetter(string: string) {\n    const str = string.replace(\"-t\", \" T\");\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  return (\n    <>\n      <CardContainer sx={{ \"&:hover\": { backgroundColor: \"surfacevariant.main\" }, height: \"100px\", width: \"100px\", p: 1, py: 2, display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\", backgroundColor: \"transparent\", backgroundImage: \"none\" }} onClick={() => { setOpen(true) }} elevation={1}>\n        <div style={{ width: \"40px\", height: \"40x\", margin: \"auto\", marginTop: \"0px\" }}>\n          <Image\n            src={`/new/${capitalizeFirstLetter(props.title)}.png`}\n            height={40}\n            width={40}\n            // layout=\"fill\"\n            alt={props.title + \"-logo\"}\n          />\n        </div>\n        <Typography variant=\"BodySmall\">{capitalizeLetter(props.title)}</Typography>\n      </CardContainer>\n      <Modal open={open} onClose={handleClose}>\n        <Grid container>\n          <Grid item sx={{ borderRadius: \"4px\", textAlign: \"center\", position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\", justifyContent: \"space-between\", alignContent: \"center\", width: { xs: \"80%\", sm: \"70%\", md: \"50%\" } }}>\n            <IconButton sx={{ position: \"absolute\", right: \"16px\", top: \"16px\" }} onClick={() => { setOpen(false) }}><MdOutlineCancel /></IconButton>\n            <CardContainer elevation={0} sx={{ p: 3, pb: { md: 7, xs: 4 }, maxWidth: \"200x\", backgroundColor: \"black\" }}>\n              <Typography paragraph sx={{ mb: 5 }} variant=\"TitleLarge\">Create {props.title[0].toUpperCase() + props.title.slice(1)}-LAB</Typography>\n              <TextField\n                margin=\"normal\"\n                required\n                defaultValue=\"MyLab\"\n                label=\"Enter Lab Name\"\n                type=\"text\"\n                inputProps={{\n                  style: {\n                    fontWeight: 400,\n                    fontSize: \"16px\",\n                    lineHeight: \"24px\",\n                  }\n                }}\n                InputLabelProps={{\n                  style: {\n                    fontWeight: 500,\n                    fontSize: \"14px\",\n                    lineHeight: \"20px\",\n                  }\n                }}\n                onChange={(e) => setName(e.target.value)}\n                InputProps={{\n                  endAdornment: (\n                    <TextButton\n                      color=\"primary\"\n                      onClick={() => { handleClick(name) }}\n                    >\n                      <Typography variant=\"LabelMedium\">Open</Typography>\n                    </TextButton>\n                  ),\n                }}\n                ref={null}\n              />\n            </CardContainer>\n          </Grid>\n        </Grid>\n      </Modal>\n    </>\n  )\n}\n\nexport interface Track {\n  title: string;\n  // imageUrl: string;\n}\n\nexport const FestecTracks: Array<Track> = [\n  {\n    // imageUrl: \"\",\n    title: \"react\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"angular\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vue\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"next\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"nuxt\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"react-Typescript\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"next-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"quasar\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"quasar-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"remix\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"remix-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"solid\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"solid-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"svelte\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vite-Lit\",\n  },\n  {\n    // imageUrl: \"/vite-lit-typescript.png\",\n    title: \"vite-Lit-Typescript\",\n  },\n  {\n    // imageUrl: \"/vite-preact.svg\",\n    title: \"vite-Preact\",\n  },\n  {\n    // imageUrl: \"/vite-preact-typescript.svg\",\n    title: \"vite-Preact-Typescript\",\n  },\n  {\n    // imageUrl: \"/vite-react.svg\",\n    title: \"vite-React\",\n  },\n  {\n    // imageUrl: \"/vite-react-typescript.svg\",\n    title: \"vite-React-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vite-Svelte\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vite-Svelte-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vite-Vanilla\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vite-Vanilla-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"vue-Typescript\",\n  },\n  {\n    // imageUrl: \"\",\n    title: \"express\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"feathers\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"nest\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"java\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"c\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"cpp\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"swift\"\n  },\n  {\n    // imageUrl: \"\",\n    title: \"python\"\n  },\n];","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reactMarkDown\":\"markdown-styles_reactMarkDown__k3MfX\"};","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"names":["Details","details","param","setValue","useFormContext","data","setData","React","text","setText","fetch","process","method","headers","body","JSON","stringify","name","then","res","json","catch","console","log","err","jsx_runtime","jsxs","Stack","rowGap","sx","pb","width","jsx","Box","Controller","defaultValue","title","render","field","ref","fieldState","error","TextField","fullWidth","required","variant","placeholder","inputProps","style","fontWeight","fontSize","lineHeight","InputLabelProps","helperText","message","subtitle","Autocomplete","multiple","getOptionLabel","options","onChange","_e","value","isOptionEqualToValue","option","renderInput","params","label","SubmissionFormProvider","children","team","id","setOpen","formState","session","useSession","user","enqueueSnackbar","useSnackbar","autoSavedSubmissionData","parse","String","localStorage","getItem","DEFAULT","methods","useForm","mode","defaultValues","watch","setItem","handleSubmissionFormSubmit","Submission","team_id","problem","link","accessToken","Authorization","submission","eventId","ok","success","removeItem","FormProvider","form","onSubmit","handleSubmit","tags","description","solution","deployment","github","video","Editor","dynamic","Promise","all","__webpack_require__","e","bind","loading","Skeleton","height","Problem","Problems","Typography","mt","mb","renderHTML","className","ReactMarkdown","Links","div","rules","pattern","props","fest","type","time","Date","now","startDate","getTime","open","disabled","Fragment","spacing","margin","paragraph","display","problems","alignContent","PlayArea","FilledButton","justifyContent","m","Modal","onClose","Grid","container","item","borderRadius","textAlign","position","top","left","transform","xs","sm","md","CardContainer","elevation","p","onClick","alignItems","Dashboard_Submission","styled","Paper","theme","border","backgroundColor","palette","newbackground","main","SubmissionCard","borderImageSource","borderImageSlice","backgroundImage","overflow","Image","src","alt","layout","color","Allsubmissions","Title","length","ml","map","prop","ModalPlayground","ssr","plus","setUser","foo","usr","window","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","direction","FestecTracks","festectracks","i","includes","TrackCard","cursor","selected","router","useRouter","useState","setName","handleClick","username","uuidv4","push","handleClose","_event","reason","py","flexDirection","marginTop","concat","capitalizeFirstLetter","string","str","replace","charAt","toUpperCase","slice","capitalizeLetter","IconButton","right","MdOutlineCancel","maxWidth","target","InputProps","endAdornment","TextButton","__webpack_exports__","module","exports","getRandomValues","randomUUID","crypto","esm_browser_native","rnds8","Uint8Array","rng","byteToHex","toString","esm_browser_v4","buf","offset","rnds","random","unsafeStringify","arr","toLowerCase"],"sourceRoot":""}