{"version":3,"file":"static/chunks/7632-c608e26ee66f0bb9.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/utils/esm/usePreviousProps.js","webpack://_N_E/./node_modules/@mui/base/useAutocomplete/useAutocomplete.js","webpack://_N_E/./node_modules/@mui/material/ListSubheader/listSubheaderClasses.js","webpack://_N_E/./node_modules/@mui/material/ListSubheader/ListSubheader.js","webpack://_N_E/./node_modules/@mui/material/internal/svg-icons/Close.js","webpack://_N_E/./node_modules/@mui/material/Autocomplete/autocompleteClasses.js","webpack://_N_E/./node_modules/@mui/material/Autocomplete/Autocomplete.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nconst usePreviousProps = value => {\n  const ref = React.useRef({});\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\nexport default usePreviousProps;","import _extends from \"@babel/runtime/helpers/esm/extends\";\n/* eslint-disable no-constant-condition */\nimport * as React from 'react';\nimport { unstable_setRef as setRef, unstable_useEventCallback as useEventCallback, unstable_useControlled as useControlled, unstable_useId as useId, usePreviousProps } from '@mui/utils';\n\n// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\n// Give up on IE11 support for this feature\nfunction stripDiacritics(string) {\n  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '') : string;\n}\nexport function createFilterOptions(config = {}) {\n  const {\n    ignoreAccents = true,\n    ignoreCase = true,\n    limit,\n    matchFrom = 'any',\n    stringify,\n    trim = false\n  } = config;\n  return (options, {\n    inputValue,\n    getOptionLabel\n  }) => {\n    let input = trim ? inputValue.trim() : inputValue;\n    if (ignoreCase) {\n      input = input.toLowerCase();\n    }\n    if (ignoreAccents) {\n      input = stripDiacritics(input);\n    }\n    const filteredOptions = !input ? options : options.filter(option => {\n      let candidate = (stringify || getOptionLabel)(option);\n      if (ignoreCase) {\n        candidate = candidate.toLowerCase();\n      }\n      if (ignoreAccents) {\n        candidate = stripDiacritics(candidate);\n      }\n      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;\n    });\n    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;\n  };\n}\n\n// To replace with .findIndex() once we stop IE11 support.\nfunction findIndex(array, comp) {\n  for (let i = 0; i < array.length; i += 1) {\n    if (comp(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nconst defaultFilterOptions = createFilterOptions();\n\n// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.\nconst pageSize = 5;\nconst defaultIsActiveElementInListbox = listboxRef => {\n  var _listboxRef$current$p;\n  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));\n};\nexport default function useAutocomplete(props) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    unstable_classNamePrefix = 'Mui',\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    componentName = 'useAutocomplete',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled: disabledProp,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    filterOptions = defaultFilterOptions,\n    filterSelectedOptions = false,\n    freeSolo = false,\n    getOptionDisabled,\n    getOptionLabel: getOptionLabelProp = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    isOptionEqualToValue = (option, value) => option === value,\n    multiple = false,\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open: openProp,\n    openOnFocus = false,\n    options,\n    readOnly = false,\n    selectOnFocus = !props.freeSolo,\n    value: valueProp\n  } = props;\n  const id = useId(idProp);\n  let getOptionLabel = getOptionLabelProp;\n  getOptionLabel = option => {\n    const optionLabel = getOptionLabelProp(option);\n    if (typeof optionLabel !== 'string') {\n      if (process.env.NODE_ENV !== 'production') {\n        const erroneousReturn = optionLabel === undefined ? 'undefined' : `${typeof optionLabel} (${optionLabel})`;\n        console.error(`MUI: The \\`getOptionLabel\\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);\n      }\n      return String(optionLabel);\n    }\n    return optionLabel;\n  };\n  const ignoreFocus = React.useRef(false);\n  const firstFocus = React.useRef(true);\n  const inputRef = React.useRef(null);\n  const listboxRef = React.useRef(null);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [focusedTag, setFocusedTag] = React.useState(-1);\n  const defaultHighlighted = autoHighlight ? 0 : -1;\n  const highlightedIndexRef = React.useRef(defaultHighlighted);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: componentName\n  });\n  const [inputValue, setInputValueState] = useControlled({\n    controlled: inputValueProp,\n    default: '',\n    name: componentName,\n    state: 'inputValue'\n  });\n  const [focused, setFocused] = React.useState(false);\n  const resetInputValue = React.useCallback((event, newValue) => {\n    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false\n    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item\n    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;\n    if (!isOptionSelected && !clearOnBlur) {\n      return;\n    }\n    let newInputValue;\n    if (multiple) {\n      newInputValue = '';\n    } else if (newValue == null) {\n      newInputValue = '';\n    } else {\n      const optionLabel = getOptionLabel(newValue);\n      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';\n    }\n    if (inputValue === newInputValue) {\n      return;\n    }\n    setInputValueState(newInputValue);\n    if (onInputChange) {\n      onInputChange(event, newInputValue, 'reset');\n    }\n  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);\n  const [open, setOpenState] = useControlled({\n    controlled: openProp,\n    default: false,\n    name: componentName,\n    state: 'open'\n  });\n  const [inputPristine, setInputPristine] = React.useState(true);\n  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);\n  const popupOpen = open && !readOnly;\n  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {\n    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {\n      return false;\n    }\n    return true;\n  }),\n  // we use the empty string to manipulate `filterOptions` to not filter any options\n  // i.e. the filter predicate always returns true\n  {\n    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,\n    getOptionLabel\n  }) : [];\n  const previousProps = usePreviousProps({\n    filteredOptions,\n    value\n  });\n  React.useEffect(() => {\n    const valueChange = value !== previousProps.value;\n    if (focused && !valueChange) {\n      return;\n    }\n\n    // Only reset the input's value when freeSolo if the component's value changes.\n    if (freeSolo && !valueChange) {\n      return;\n    }\n    resetInputValue(null, value);\n  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);\n  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== null && !freeSolo && options.length > 0) {\n      const missingValue = (multiple ? value : [value]).filter(value2 => !options.some(option => isOptionEqualToValue(option, value2)));\n      if (missingValue.length > 0) {\n        console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \\`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\\`.`, 'You can use the `isOptionEqualToValue` prop to customize the equality test.'].join('\\n'));\n      }\n    }\n  }\n  const focusTag = useEventCallback(tagToFocus => {\n    if (tagToFocus === -1) {\n      inputRef.current.focus();\n    } else {\n      anchorEl.querySelector(`[data-tag-index=\"${tagToFocus}\"]`).focus();\n    }\n  });\n\n  // Ensure the focusedTag is never inconsistent\n  React.useEffect(() => {\n    if (multiple && focusedTag > value.length - 1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n  }, [value, multiple, focusedTag, focusTag]);\n  function validOptionIndex(index, direction) {\n    if (!listboxRef.current || index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === filteredOptions.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = listboxRef.current.querySelector(`[data-option-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';\n      if (option && !option.hasAttribute('tabindex') || nextFocusDisabled) {\n        // Move to the next element.\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const setHighlightedIndex = useEventCallback(({\n    event,\n    index,\n    reason = 'auto'\n  }) => {\n    highlightedIndexRef.current = index;\n\n    // does the index exist?\n    if (index === -1) {\n      inputRef.current.removeAttribute('aria-activedescendant');\n    } else {\n      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);\n    }\n    if (onHighlightChange) {\n      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n    const prev = listboxRef.current.querySelector(`[role=\"option\"].${unstable_classNamePrefix}-focused`);\n    if (prev) {\n      prev.classList.remove(`${unstable_classNamePrefix}-focused`);\n      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);\n    }\n    const listboxNode = listboxRef.current.parentElement.querySelector('[role=\"listbox\"]');\n\n    // \"No results\"\n    if (!listboxNode) {\n      return;\n    }\n    if (index === -1) {\n      listboxNode.scrollTop = 0;\n      return;\n    }\n    const option = listboxRef.current.querySelector(`[data-option-index=\"${index}\"]`);\n    if (!option) {\n      return;\n    }\n    option.classList.add(`${unstable_classNamePrefix}-focused`);\n    if (reason === 'keyboard') {\n      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);\n    }\n\n    // Scroll active descendant into view.\n    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js\n    //\n    // Consider this API instead once it has a better browser support:\n    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });\n    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse') {\n      const element = option;\n      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;\n      const elementBottom = element.offsetTop + element.offsetHeight;\n      if (elementBottom > scrollBottom) {\n        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;\n      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {\n        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);\n      }\n    }\n  });\n  const changeHighlightedIndex = useEventCallback(({\n    event,\n    diff,\n    direction = 'next',\n    reason = 'auto'\n  }) => {\n    if (!popupOpen) {\n      return;\n    }\n    const getNextIndex = () => {\n      const maxIndex = filteredOptions.length - 1;\n      if (diff === 'reset') {\n        return defaultHighlighted;\n      }\n      if (diff === 'start') {\n        return 0;\n      }\n      if (diff === 'end') {\n        return maxIndex;\n      }\n      const newIndex = highlightedIndexRef.current + diff;\n      if (newIndex < 0) {\n        if (newIndex === -1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {\n          return 0;\n        }\n        return maxIndex;\n      }\n      if (newIndex > maxIndex) {\n        if (newIndex === maxIndex + 1 && includeInputInList) {\n          return -1;\n        }\n        if (disableListWrap || Math.abs(diff) > 1) {\n          return maxIndex;\n        }\n        return 0;\n      }\n      return newIndex;\n    };\n    const nextIndex = validOptionIndex(getNextIndex(), direction);\n    setHighlightedIndex({\n      index: nextIndex,\n      reason,\n      event\n    });\n\n    // Sync the content of the input with the highlighted option.\n    if (autoComplete && diff !== 'reset') {\n      if (nextIndex === -1) {\n        inputRef.current.value = inputValue;\n      } else {\n        const option = getOptionLabel(filteredOptions[nextIndex]);\n        inputRef.current.value = option;\n\n        // The portion of the selected suggestion that has not been typed by the user,\n        // a completion string, appears inline after the input cursor in the textbox.\n        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());\n        if (index === 0 && inputValue.length > 0) {\n          inputRef.current.setSelectionRange(inputValue.length, option.length);\n        }\n      }\n    }\n  });\n  const checkHighlightedOptionExists = () => {\n    const isSameValue = (value1, value2) => {\n      const label1 = value1 ? getOptionLabel(value1) : '';\n      const label2 = value2 ? getOptionLabel(value2) : '';\n      return label1 === label2;\n    };\n    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {\n      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];\n      if (previousHighlightedOption) {\n        const previousHighlightedOptionExists = filteredOptions.some(option => {\n          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);\n        });\n        if (previousHighlightedOptionExists) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const syncHighlightedIndex = React.useCallback(() => {\n    if (!popupOpen) {\n      return;\n    }\n\n    // Check if the previously highlighted option still exists in the updated filtered options list and if the value hasn't changed\n    // If it exists and the value hasn't changed, return, otherwise continue execution\n    if (checkHighlightedOptionExists()) {\n      return;\n    }\n    const valueItem = multiple ? value[0] : value;\n\n    // The popup is empty, reset\n    if (filteredOptions.length === 0 || valueItem == null) {\n      changeHighlightedIndex({\n        diff: 'reset'\n      });\n      return;\n    }\n    if (!listboxRef.current) {\n      return;\n    }\n\n    // Synchronize the value with the highlighted index\n    if (valueItem != null) {\n      const currentOption = filteredOptions[highlightedIndexRef.current];\n\n      // Keep the current highlighted index if possible\n      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {\n        return;\n      }\n      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));\n      if (itemIndex === -1) {\n        changeHighlightedIndex({\n          diff: 'reset'\n        });\n      } else {\n        setHighlightedIndex({\n          index: itemIndex\n        });\n      }\n      return;\n    }\n\n    // Prevent the highlighted index to leak outside the boundaries.\n    if (highlightedIndexRef.current >= filteredOptions.length - 1) {\n      setHighlightedIndex({\n        index: filteredOptions.length - 1\n      });\n      return;\n    }\n\n    // Restore the focus to the previous index.\n    setHighlightedIndex({\n      index: highlightedIndexRef.current\n    });\n    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n  // Only sync the highlighted index when the option switch between empty and not\n  filteredOptions.length,\n  // Don't sync the highlighted index with the value when multiple\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);\n  const handleListboxRef = useEventCallback(node => {\n    setRef(listboxRef, node);\n    if (!node) {\n      return;\n    }\n    syncHighlightedIndex();\n  });\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (!inputRef.current || inputRef.current.nodeName !== 'INPUT') {\n        if (inputRef.current && inputRef.current.nodeName === 'TEXTAREA') {\n          console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join('\\n'));\n        } else {\n          console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, '', componentName === 'useAutocomplete' ? 'Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed.' : 'Make sure you have customized the input component correctly.'].join('\\n'));\n        }\n      }\n    }, [componentName]);\n  }\n  React.useEffect(() => {\n    syncHighlightedIndex();\n  }, [syncHighlightedIndex]);\n  const handleOpen = event => {\n    if (open) {\n      return;\n    }\n    setOpenState(true);\n    setInputPristine(true);\n    if (onOpen) {\n      onOpen(event);\n    }\n  };\n  const handleClose = (event, reason) => {\n    if (!open) {\n      return;\n    }\n    setOpenState(false);\n    if (onClose) {\n      onClose(event, reason);\n    }\n  };\n  const handleValue = (event, newValue, reason, details) => {\n    if (multiple) {\n      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {\n        return;\n      }\n    } else if (value === newValue) {\n      return;\n    }\n    if (onChange) {\n      onChange(event, newValue, reason, details);\n    }\n    setValueState(newValue);\n  };\n  const isTouch = React.useRef(false);\n  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {\n    let reason = reasonProp;\n    let newValue = option;\n    if (multiple) {\n      newValue = Array.isArray(value) ? value.slice() : [];\n      if (process.env.NODE_ENV !== 'production') {\n        const matches = newValue.filter(val => isOptionEqualToValue(option, val));\n        if (matches.length > 1) {\n          console.error([`MUI: The \\`isOptionEqualToValue\\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join('\\n'));\n        }\n      }\n      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));\n      if (itemIndex === -1) {\n        newValue.push(option);\n      } else if (origin !== 'freeSolo') {\n        newValue.splice(itemIndex, 1);\n        reason = 'removeOption';\n      }\n    }\n    resetInputValue(event, newValue);\n    handleValue(event, newValue, reason, {\n      option\n    });\n    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {\n      handleClose(event, reason);\n    }\n    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {\n      inputRef.current.blur();\n    }\n  };\n  function validTagIndex(index, direction) {\n    if (index === -1) {\n      return -1;\n    }\n    let nextFocus = index;\n    while (true) {\n      // Out of range\n      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {\n        return -1;\n      }\n      const option = anchorEl.querySelector(`[data-tag-index=\"${nextFocus}\"]`);\n\n      // Same logic as MenuList.js\n      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {\n        nextFocus += direction === 'next' ? 1 : -1;\n      } else {\n        return nextFocus;\n      }\n    }\n  }\n  const handleFocusTag = (event, direction) => {\n    if (!multiple) {\n      return;\n    }\n    if (inputValue === '') {\n      handleClose(event, 'toggleInput');\n    }\n    let nextTag = focusedTag;\n    if (focusedTag === -1) {\n      if (inputValue === '' && direction === 'previous') {\n        nextTag = value.length - 1;\n      }\n    } else {\n      nextTag += direction === 'next' ? 1 : -1;\n      if (nextTag < 0) {\n        nextTag = 0;\n      }\n      if (nextTag === value.length) {\n        nextTag = -1;\n      }\n    }\n    nextTag = validTagIndex(nextTag, direction);\n    setFocusedTag(nextTag);\n    focusTag(nextTag);\n  };\n  const handleClear = event => {\n    ignoreFocus.current = true;\n    setInputValueState('');\n    if (onInputChange) {\n      onInputChange(event, '', 'clear');\n    }\n    handleValue(event, multiple ? [] : null, 'clear');\n  };\n  const handleKeyDown = other => event => {\n    if (other.onKeyDown) {\n      other.onKeyDown(event);\n    }\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {\n      setFocusedTag(-1);\n      focusTag(-1);\n    }\n\n    // Wait until IME is settled.\n    if (event.which !== 229) {\n      switch (event.key) {\n        case 'Home':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'start',\n              direction: 'next',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'End':\n          if (popupOpen && handleHomeEndKeys) {\n            // Prevent scroll of the page\n            event.preventDefault();\n            changeHighlightedIndex({\n              diff: 'end',\n              direction: 'previous',\n              reason: 'keyboard',\n              event\n            });\n          }\n          break;\n        case 'PageUp':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -pageSize,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'PageDown':\n          // Prevent scroll of the page\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: pageSize,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowDown':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: 1,\n            direction: 'next',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowUp':\n          // Prevent cursor move\n          event.preventDefault();\n          changeHighlightedIndex({\n            diff: -1,\n            direction: 'previous',\n            reason: 'keyboard',\n            event\n          });\n          handleOpen(event);\n          break;\n        case 'ArrowLeft':\n          handleFocusTag(event, 'previous');\n          break;\n        case 'ArrowRight':\n          handleFocusTag(event, 'next');\n          break;\n        case 'Enter':\n          if (highlightedIndexRef.current !== -1 && popupOpen) {\n            const option = filteredOptions[highlightedIndexRef.current];\n            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n\n            // Avoid early form validation, let the end-users continue filling the form.\n            event.preventDefault();\n            if (disabled) {\n              return;\n            }\n            selectNewValue(event, option, 'selectOption');\n\n            // Move the selection to the end.\n            if (autoComplete) {\n              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n            }\n          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {\n            if (multiple) {\n              // Allow people to add new values before they submit the form.\n              event.preventDefault();\n            }\n            selectNewValue(event, inputValue, 'createOption', 'freeSolo');\n          }\n          break;\n        case 'Escape':\n          if (popupOpen) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClose(event, 'escape');\n          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {\n            // Avoid Opera to exit fullscreen mode.\n            event.preventDefault();\n            // Avoid the Modal to handle the event.\n            event.stopPropagation();\n            handleClear(event);\n          }\n          break;\n        case 'Backspace':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0) {\n            const index = focusedTag === -1 ? value.length - 1 : focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        case 'Delete':\n          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {\n            const index = focusedTag;\n            const newValue = value.slice();\n            newValue.splice(index, 1);\n            handleValue(event, newValue, 'removeOption', {\n              option: value[index]\n            });\n          }\n          break;\n        default:\n      }\n    }\n  };\n  const handleFocus = event => {\n    setFocused(true);\n    if (openOnFocus && !ignoreFocus.current) {\n      handleOpen(event);\n    }\n  };\n  const handleBlur = event => {\n    // Ignore the event when using the scrollbar with IE11\n    if (unstable_isActiveElementInListbox(listboxRef)) {\n      inputRef.current.focus();\n      return;\n    }\n    setFocused(false);\n    firstFocus.current = true;\n    ignoreFocus.current = false;\n    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {\n      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');\n    } else if (autoSelect && freeSolo && inputValue !== '') {\n      selectNewValue(event, inputValue, 'blur', 'freeSolo');\n    } else if (clearOnBlur) {\n      resetInputValue(event, value);\n    }\n    handleClose(event, 'blur');\n  };\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    if (inputValue !== newValue) {\n      setInputValueState(newValue);\n      setInputPristine(false);\n      if (onInputChange) {\n        onInputChange(event, newValue, 'input');\n      }\n    }\n    if (newValue === '') {\n      if (!disableClearable && !multiple) {\n        handleValue(event, null, 'clear');\n      }\n    } else {\n      handleOpen(event);\n    }\n  };\n  const handleOptionMouseOver = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'mouse'\n    });\n  };\n  const handleOptionTouchStart = event => {\n    setHighlightedIndex({\n      event,\n      index: Number(event.currentTarget.getAttribute('data-option-index')),\n      reason: 'touch'\n    });\n    isTouch.current = true;\n  };\n  const handleOptionClick = event => {\n    const index = Number(event.currentTarget.getAttribute('data-option-index'));\n    selectNewValue(event, filteredOptions[index], 'selectOption');\n    isTouch.current = false;\n  };\n  const handleTagDelete = index => event => {\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    handleValue(event, newValue, 'removeOption', {\n      option: value[index]\n    });\n  };\n  const handlePopupIndicator = event => {\n    if (open) {\n      handleClose(event, 'toggleInput');\n    } else {\n      handleOpen(event);\n    }\n  };\n\n  // Prevent input blur when interacting with the combobox\n  const handleMouseDown = event => {\n    if (event.target.getAttribute('id') !== id) {\n      event.preventDefault();\n    }\n  };\n\n  // Focus the input when interacting with the combobox\n  const handleClick = () => {\n    inputRef.current.focus();\n    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {\n      inputRef.current.select();\n    }\n    firstFocus.current = false;\n  };\n  const handleInputMouseDown = event => {\n    if (inputValue === '' || !open) {\n      handlePopupIndicator(event);\n    }\n  };\n  let dirty = freeSolo && inputValue.length > 0;\n  dirty = dirty || (multiple ? value.length > 0 : value !== null);\n  let groupedOptions = filteredOptions;\n  if (groupBy) {\n    // used to keep track of key and indexes in the result array\n    const indexBy = new Map();\n    let warn = false;\n    groupedOptions = filteredOptions.reduce((acc, option, index) => {\n      const group = groupBy(option);\n      if (acc.length > 0 && acc[acc.length - 1].group === group) {\n        acc[acc.length - 1].options.push(option);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          if (indexBy.get(group) && !warn) {\n            console.warn(`MUI: The options provided combined with the \\`groupBy\\` method of ${componentName} returns duplicated headers.`, 'You can solve the issue by sorting the options with the output of `groupBy`.');\n            warn = true;\n          }\n          indexBy.set(group, true);\n        }\n        acc.push({\n          key: index,\n          index,\n          group,\n          options: [option]\n        });\n      }\n      return acc;\n    }, []);\n  }\n  if (disabledProp && focused) {\n    handleBlur();\n  }\n  return {\n    getRootProps: (other = {}) => _extends({\n      'aria-owns': listboxAvailable ? `${id}-listbox` : null\n    }, other, {\n      onKeyDown: handleKeyDown(other),\n      onMouseDown: handleMouseDown,\n      onClick: handleClick\n    }),\n    getInputLabelProps: () => ({\n      id: `${id}-label`,\n      htmlFor: id\n    }),\n    getInputProps: () => ({\n      id,\n      value: inputValue,\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      onChange: handleInputChange,\n      onMouseDown: handleInputMouseDown,\n      // if open then this is handled imperativeley so don't let react override\n      // only have an opinion about this when closed\n      'aria-activedescendant': popupOpen ? '' : null,\n      'aria-autocomplete': autoComplete ? 'both' : 'list',\n      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,\n      'aria-expanded': listboxAvailable,\n      // Disable browser's suggestion that might overlap with the popup.\n      // Handle autocomplete but not autofill.\n      autoComplete: 'off',\n      ref: inputRef,\n      autoCapitalize: 'none',\n      spellCheck: 'false',\n      role: 'combobox',\n      disabled: disabledProp\n    }),\n    getClearProps: () => ({\n      tabIndex: -1,\n      onClick: handleClear\n    }),\n    getPopupIndicatorProps: () => ({\n      tabIndex: -1,\n      onClick: handlePopupIndicator\n    }),\n    getTagProps: ({\n      index\n    }) => _extends({\n      key: index,\n      'data-tag-index': index,\n      tabIndex: -1\n    }, !readOnly && {\n      onDelete: handleTagDelete(index)\n    }),\n    getListboxProps: () => ({\n      role: 'listbox',\n      id: `${id}-listbox`,\n      'aria-labelledby': `${id}-label`,\n      ref: handleListboxRef,\n      onMouseDown: event => {\n        // Prevent blur\n        event.preventDefault();\n      }\n    }),\n    getOptionProps: ({\n      index,\n      option\n    }) => {\n      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));\n      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;\n      return {\n        key: getOptionLabel(option),\n        tabIndex: -1,\n        role: 'option',\n        id: `${id}-option-${index}`,\n        onMouseOver: handleOptionMouseOver,\n        onClick: handleOptionClick,\n        onTouchStart: handleOptionTouchStart,\n        'data-option-index': index,\n        'aria-disabled': disabled,\n        'aria-selected': selected\n      };\n    },\n    id,\n    inputValue,\n    value,\n    dirty,\n    expanded: popupOpen && anchorEl,\n    popupOpen,\n    focused: focused || focusedTag !== -1,\n    anchorEl,\n    setAnchorEl,\n    focusedTag,\n    groupedOptions\n  };\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getListSubheaderUtilityClass(slot) {\n  return generateUtilityClass('MuiListSubheader', slot);\n}\nconst listSubheaderClasses = generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);\nexport default listSubheaderClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"disableGutters\", \"disableSticky\", \"inset\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getListSubheaderUtilityClass } from './listSubheaderClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    disableGutters,\n    inset,\n    disableSticky\n  } = ownerState;\n  const slots = {\n    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']\n  };\n  return composeClasses(slots, getListSubheaderUtilityClass, classes);\n};\nconst ListSubheaderRoot = styled('li', {\n  name: 'MuiListSubheader',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box',\n  lineHeight: '48px',\n  listStyle: 'none',\n  color: (theme.vars || theme).palette.text.secondary,\n  fontFamily: theme.typography.fontFamily,\n  fontWeight: theme.typography.fontWeightMedium,\n  fontSize: theme.typography.pxToRem(14)\n}, ownerState.color === 'primary' && {\n  color: (theme.vars || theme).palette.primary.main\n}, ownerState.color === 'inherit' && {\n  color: 'inherit'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.inset && {\n  paddingLeft: 72\n}, !ownerState.disableSticky && {\n  position: 'sticky',\n  top: 0,\n  zIndex: 1,\n  backgroundColor: (theme.vars || theme).palette.background.paper\n}));\nconst ListSubheader = /*#__PURE__*/React.forwardRef(function ListSubheader(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiListSubheader'\n  });\n  const {\n      className,\n      color = 'default',\n      component = 'li',\n      disableGutters = false,\n      disableSticky = false,\n      inset = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    disableGutters,\n    disableSticky,\n    inset\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ListSubheaderRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nListSubheader.muiSkipListHighlight = true;\nprocess.env.NODE_ENV !== \"production\" ? ListSubheader.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary']),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   * @default false\n   */\n  disableSticky: PropTypes.bool,\n  /**\n   * If `true`, the List Subheader is indented.\n   * @default false\n   */\n  inset: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ListSubheader;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n *\n * Alias to `Clear`.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getAutocompleteUtilityClass(slot) {\n  return generateUtilityClass('MuiAutocomplete', slot);\n}\nconst autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);\nexport default autocompleteClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _ClearIcon, _ArrowDropDownIcon;\nconst _excluded = [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"componentsProps\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"isOptionEqualToValue\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"readOnly\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"slotProps\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(({\n  ownerState\n}) => _extends({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  }\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${autocompleteClasses.tag}`]: _extends({\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  }, ownerState.size === 'small' && {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  }),\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 6px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 6px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: _extends({\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  }, ownerState.inputFocused && {\n    opacity: 1\n  })\n}));\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n});\n\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)\n})(({\n  ownerState\n}) => _extends({\n  padding: 2,\n  marginRight: -2\n}, ownerState.popupOpen && {\n  transform: 'rotate(180deg)'\n}));\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  zIndex: (theme.vars || theme).zIndex.modal\n}, ownerState.disablePortal && {\n  position: 'absolute'\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => _extends({}, theme.typography.body1, {\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n      autoComplete = false,\n      autoHighlight = false,\n      autoSelect = false,\n      blurOnSelect = false,\n      ChipProps,\n      className,\n      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n        fontSize: \"small\"\n      })),\n      clearOnBlur = !props.freeSolo,\n      clearOnEscape = false,\n      clearText = 'Clear',\n      closeText = 'Close',\n      componentsProps = {},\n      defaultValue = props.multiple ? [] : null,\n      disableClearable = false,\n      disableCloseOnSelect = false,\n      disabled = false,\n      disabledItemsFocusable = false,\n      disableListWrap = false,\n      disablePortal = false,\n      filterSelectedOptions = false,\n      forcePopupIcon = 'auto',\n      freeSolo = false,\n      fullWidth = false,\n      getLimitTagsText = more => `+${more}`,\n      getOptionLabel = option => {\n        var _option$label;\n        return (_option$label = option.label) != null ? _option$label : option;\n      },\n      groupBy,\n      handleHomeEndKeys = !props.freeSolo,\n      includeInputInList = false,\n      limitTags = -1,\n      ListboxComponent = 'ul',\n      ListboxProps,\n      loading = false,\n      loadingText = 'Loading…',\n      multiple = false,\n      noOptionsText = 'No options',\n      openOnFocus = false,\n      openText = 'Open',\n      PaperComponent = Paper,\n      PopperComponent = Popper,\n      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n      readOnly = false,\n      renderGroup: renderGroupProp,\n      renderInput,\n      renderOption: renderOptionProp,\n      renderTags,\n      selectOnFocus = !props.freeSolo,\n      size = 'medium',\n      slotProps = {}\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = _extends({}, props, {\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: classes.tag,\n      disabled\n    }, getTagProps(params));\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", _extends({}, props2, {\n    children: getOptionLabel(option)\n  }));\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    });\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, _extends({\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState\n    }, getRootProps(other), {\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: _extends({\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment\n        }, (hasClearIcon || hasPopupIcon) && {\n          endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n            className: classes.endAdornment,\n            ownerState: ownerState,\n            children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {\n              \"aria-label\": clearText,\n              title: clearText,\n              ownerState: ownerState\n            }, clearIndicatorSlotProps, {\n              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n              children: clearIcon\n            })) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {\n              disabled: disabled,\n              \"aria-label\": popupOpen ? closeText : openText,\n              title: popupOpen ? closeText : openText,\n              ownerState: ownerState\n            }, popupIndicatorSlotProps, {\n              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n              children: popupIcon\n            })) : null]\n          })\n        }),\n        inputProps: _extends({\n          className: classes.input,\n          disabled,\n          readOnly\n        }, getInputProps())\n      })\n    })), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, _extends({\n      as: PopperComponent,\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: popupOpen\n    }, popperSlotProps, {\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, _extends({\n        ownerState: ownerState,\n        as: PaperComponent\n      }, paperSlotProps, {\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, _extends({\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState\n        }, getListboxProps(), ListboxProps, {\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        })) : null]\n      }))\n    })) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"],"names":["_ClearIcon","_ArrowDropDownIcon","usePreviousProps","value","ref","react","useRef","useEffect","current","stripDiacritics","string","normalize","replace","findIndex","array","comp","i","length","defaultFilterOptions","createFilterOptions","config","ignoreAccents","ignoreCase","limit","matchFrom","stringify","trim","options","inputValue","getOptionLabel","input","toLowerCase","filteredOptions","filter","option","candidate","indexOf","slice","defaultIsActiveElementInListbox","listboxRef","_listboxRef$current$p","parentElement","contains","document","activeElement","getListSubheaderUtilityClass","slot","generateUtilityClass","Z","generateUtilityClasses","_excluded","useUtilityClasses","ownerState","classes","color","disableGutters","inset","disableSticky","slots","root","capitalize","composeClasses","ListSubheaderRoot","styled","ZP","name","overridesResolver","props","styles","gutters","sticky","theme","esm_extends","boxSizing","lineHeight","listStyle","vars","palette","text","secondary","fontFamily","typography","fontWeight","fontWeightMedium","fontSize","pxToRem","primary","main","paddingLeft","paddingRight","position","top","zIndex","backgroundColor","background","paper","ListSubheader","forwardRef","inProps","useThemeProps","className","component","other","objectWithoutPropertiesLoose","jsx_runtime","jsx","as","clsx_m","muiSkipListHighlight","Close","createSvgIcon","d","getAutocompleteUtilityClass","autocompleteClasses","Autocomplete_excluded","Autocomplete_useUtilityClasses","disablePortal","expanded","focused","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","inputRoot","tag","endAdornment","clearIndicator","popupIndicator","popper","listbox","loading","noOptions","groupLabel","groupUl","AutocompleteRoot","Autocomplete_autocompleteClasses","visibility","width","margin","maxWidth","flexWrap","minWidth","inputClasses","paddingBottom","padding","inputBaseClasses","sizeSmall","outlinedInputClasses","right","paddingTop","filledInputClasses","hiddenLabel","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","AutocompleteClearIndicator","IconButton","marginRight","AutocompletePopupIndicator","popupIndicatorOpen","transform","AutocompletePopper","Popper","popperDisablePortal","modal","AutocompletePaper","Paper","body1","overflow","AutocompleteLoading","AutocompleteNoOptions","AutocompleteListbox","maxHeight","minHeight","display","justifyContent","alignItems","cursor","outline","WebkitTapHighlightColor","breakpoints","up","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","mainChannel","selectedOpacity","colorManipulator","Fq","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","AutocompleteGroupUl","Autocomplete","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","startAdornment","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","clearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","ArrowDropDown","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","id","focusedTag","anchorEl","setAnchorEl","groupedOptions","useAutocomplete","unstable_isActiveElementInListbox","unstable_classNamePrefix","componentName","disabledProp","filterOptions","getOptionDisabled","getOptionLabelProp","idProp","inputValueProp","isOptionEqualToValue","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openProp","valueProp","useId","optionLabel","String","ignoreFocus","firstFocus","inputRef","useState","setFocusedTag","defaultHighlighted","highlightedIndexRef","setValueState","useControlled","controlled","default","setInputValueState","state","setFocused","resetInputValue","useCallback","event","newValue","newInputValue","isOptionSelected","setOpenState","inputPristine","setInputPristine","inputValueIsSelectedValue","some","value2","previousProps","esm_usePreviousProps","valueChange","listboxAvailable","focusTag","useEventCallback","tagToFocus","querySelector","setHighlightedIndex","index","reason","removeAttribute","setAttribute","prev","classList","remove","listboxNode","scrollTop","add","scrollHeight","clientHeight","scrollBottom","elementBottom","element","offsetTop","offsetHeight","changeHighlightedIndex","diff","direction","nextIndex","validOptionIndex","nextFocus","nextFocusDisabled","getAttribute","hasAttribute","getNextIndex","maxIndex","newIndex","Math","abs","setSelectionRange","checkHighlightedOptionExists","every","val","isSameValue","value1","label1","label2","previousHighlightedOption","previousHighlightedOptionExists","syncHighlightedIndex","valueItem","currentOption","itemIndex","optionItem","handleListboxRef","node","setRef","handleOpen","handleClose","handleValue","details","isTouch","selectNewValue","reasonProp","origin","Array","isArray","push","splice","ctrlKey","metaKey","blur","handleFocusTag","nextTag","validTagIndex","handleClear","handleKeyDown","onKeyDown","defaultMuiPrevented","key","which","preventDefault","stopPropagation","handleFocus","handleBlur","handleInputChange","target","handleOptionMouseOver","Number","currentTarget","handleOptionTouchStart","handleOptionClick","handleTagDelete","handlePopupIndicator","handleMouseDown","handleClick","selectionEnd","selectionStart","select","handleInputMouseDown","reduce","acc","group","onMouseDown","onClick","htmlFor","onBlur","onFocus","undefined","autoCapitalize","spellCheck","role","tabIndex","onDelete","onMouseOver","onTouchStart","getCustomizedTagProps","params","map","Chip","children","defaultRenderGroup","jsxs","defaultRenderOption","props2","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","Fragment","InputLabelProps","InputProps","title","inputProps","style","clientWidth","option2","index2","Autocomplete_Autocomplete"],"sourceRoot":""}