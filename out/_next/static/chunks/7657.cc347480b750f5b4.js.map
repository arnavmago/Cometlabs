{"version":3,"file":"static/chunks/7657.cc347480b750f5b4.js","mappings":"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","sources":["webpack://_N_E/./backend/functions/index.tsx","webpack://_N_E/./src/components/event/ArenaDescription.tsx","webpack://_N_E/./src/components/event/ArenaPrize.tsx","webpack://_N_E/./src/components/event/ArenaSchedule.tsx","webpack://_N_E/./src/components/event/ArenaSponsor.tsx","webpack://_N_E/./src/components/event/ArenaTracks.tsx","webpack://_N_E/./styles/markdown-styles.module.css","webpack://_N_E/<anon>"],"sourcesContent":["export const handleLandingPageEmailSubmit = (email: string) => {\n  alert(email + \" submitted for learn more\");\n};\n\nexport const handleFestCardLike = (id: string) => {\n  // id is the fest identifier\n  alert(\"user liked fest - \" + id);\n};\n\n// var form = $('#profile-photo')[0];\n// var formData = new FormData(form);\n\n\n// TODO: Add FestId\nexport const handleSingleImageUpload = async (\n  festId: string,\n  file: File,\n  accessToken: string\n): Promise<string | null> => {\n  let uploadFormData = new FormData();\n  uploadFormData.append('fileName', file, file.name);\n  uploadFormData.append('festId', festId);\n  console.log(uploadFormData);\n  let res = await fetch(\n    process.env.NEXT_PUBLIC_API_URL + \"/fests/uploadToFestS3\",\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: accessToken,\n      },\n      body: uploadFormData,\n    }\n  );\n  let url = null;\n  if (res.ok) {\n    res = await res.json();\n    url = res.url;\n  }\n  return url;\n};\n\n\nexport const handleProfileImageUpload = async (\n  email: string,\n  file: File,\n  accessToken: string\n): Promise<string | null> => {\n  console.log(email)\n  const uploadFormData = new FormData();\n  uploadFormData.append(\"fileName\", file, file.name);\n  uploadFormData.append(\"email\", email);\n  let res = await fetch(\n    process.env.NEXT_PUBLIC_API_URL + \"/user/uploadProfileImage\",\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: accessToken,\n      },\n      body: uploadFormData,\n    }\n  );\n  let url = null;\n  if (res.ok) {\n    res = await res.json();\n    url = res.url;\n  }\n  return url;\n};\n\n\nexport const handleSubmissionImageUpload = async (\n  team_id: string,\n  file: File\n): Promise<string | null> => {\n  console.log(team_id)\n  const uploadFormData = new FormData();\n  uploadFormData.append(\"fileName\", file);\n  uploadFormData.append(\"team_id\", team_id);\n  let res = await fetch(\n    process.env.NEXT_PUBLIC_API_URL + \"/c2d/uploadS3submission\",\n    {\n      method: \"POST\",\n      body: uploadFormData,\n    }\n  );\n  let url = null;\n  if (res.ok) {\n    res = await res.json();\n    url = res.url;\n  }\n  return url;\n};\n\nexport interface UserCredentails {\n  username: string;\n  password: string;\n}\n\nexport type NewUser = {\n  id: string;\n  name: string;\n  email: string;\n  profileImage: string;\n  accessToken: string;\n  username: string;\n  role: string;\n};\n\nexport type DefaultUser = {\n  id: string;\n  name: string;\n  email: string;\n  profileImage: string;\n  accessToken: string;\n  username: string;\n  role: string;\n  createdAt: Date;\n  lastLogin: Date;\n}\n\nexport const handleCustomSignIn = async (\n  params: UserCredentails\n): Promise<DefaultUser | null> => {\n  let user: DefaultUser | null = null;\n  try {\n    const res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/loginwithpassword\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: params.username,\n          password: params.password,\n          remember: \"true\",\n        }),\n      }\n    );\n    if (res.ok) {\n      const { firstName, email, accessToken, profileImage, error, username, role, id } = await res.json();\n      if (!error) {\n        user = {\n          name: firstName,\n          email: email,\n          accessToken: accessToken,\n          // TODO: replace uuid, festid and imageUrl with backend data\n          id: id,\n          profileImage: profileImage,\n          username: username,\n          role: role,\n          createdAt: new Date(),\n          lastLogin: new Date(),\n        };\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    return user;\n  }\n};\n\nexport const getGitHubEmail = async (\n  accessToken: string | undefined\n): Promise<string> => {\n  if (accessToken === undefined) {\n    return \"\";\n  }\n  const requestHeaders: HeadersInit = new Headers();\n  const authToken = `token ${accessToken}`;\n  requestHeaders.set(\"Authorization\", authToken);\n  const res = await fetch(\"https://api.github.com/user/emails\", {\n    headers: requestHeaders,\n  });\n  const emails = await res.json();\n  let email: string = \"\";\n  if (emails?.length > 0) {\n    email = emails.sort((a: any, b: any) => b.primary - a.primary)[0].email;\n  }\n  return email;\n};\n\ntype SigninWithoutPasswordProps = {\n  email: string;\n  name: string;\n  imageUrl: string;\n  username: string;\n};\n\ntype LoginInfo = {\n  accessToken?: string;\n  id?: string;\n  username?: string;\n  profileImage?: string;\n  name?: string;\n  createdAt?: Date;\n  lastLogin?: Date;\n};\n\nexport const signinWithoutPassword = async (\n  props: Partial<SigninWithoutPasswordProps>\n): Promise<LoginInfo> => {\n  const { email, name, imageUrl } = props;\n  const firstName = name?.substring(0, name.indexOf(\" \"));\n  const lastName = name?.substring(name.indexOf(\" \") + 1);\n  try {\n    const res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/loginwithoutpassword\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email,\n          firstName, lastName,\n          profileImage: imageUrl,\n        }),\n      }\n    );\n    if (res.ok) {\n      const { accessToken, id, username, profileImage, firstName, lastName, error, createdAt, lastLogin } = await res.json();\n      if (!error) {\n        // TODO: Replace with uuid\n        return {\n          accessToken: accessToken,\n          id: id,\n          username: username,\n          profileImage: profileImage,\n          name: firstName + ' ' + lastName,\n          createdAt: createdAt,\n          lastLogin: lastLogin\n        };\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  return {};\n};\n\nexport type SignupData = {\n  email: string;\n  password: string;\n  confirm: string;\n  firstName: string;\n  lastName: string;\n  profileImage?: string;\n  mobile: string;\n  mobileLocal: number;\n  countryCode: string;\n  role: string;\n  otpm: string;\n  otpe: string;\n};\n\nexport const sendOtp = async (data: SignupData, type: string) => {\n  try {\n    let res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/signup/mailotp\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({ ...data }),\n      }\n    );\n    if (res.ok) {\n      const mailer = await res.json();\n      if (type === \"RESEND\" && mailer.success) {\n        console.log(\"OTP sent to \" + data.email);\n      } else return mailer;\n    } else {\n      throw new Error(\"ON OTP_SEND: Bad response from server\");\n    }\n  } catch (error) {\n    console.log(\"Oops! Unable to send OTP.\");\n  }\n};\n\nexport const sendMobileOtp = async (data: SignupData, type: string) => {\n  try {\n    let res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/smsOTP\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({ phone: data.mobile }),\n      }\n    );\n    if (res.ok) {\n      const mailer = await res.json();\n      if (type === \"RESEND\" && mailer.success) {\n        console.log(\"OTP sent to \" + data.mobile);\n      } else return mailer;\n    } else {\n      throw new Error(\"ON OTP_SEND: Bad response from server\");\n    }\n  } catch (error) {\n    console.log(\"Oops! Unable to send OTP.\");\n  }\n};\n\n\n\n// export const userLogOut = async (token: string) => {\n//   try {\n//     let res = await fetch(\n//       process.env.NEXT_PUBLIC_API_URL + \"/api/logout\",\n//       {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json;charset=utf-8\",\n//           Authorization: `bearer ${token}`,\n//         },\n//       }\n//     );\n//     if (res.ok) {\n//       const result = await res.json();\n//       if (result.success) {\n//         return result;\n//       }\n//       else {\n//         return result;\n//       }\n//      } else {\n//       throw new Error(\"unable to logout\");\n//     }\n//   } catch (error) {\n//     console.log(\"unable to log out\");\n//   }\n// };","import { ReadOnly, arenaDescription } from \"./types\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { Skeleton, TextField, Box, Typography } from \"@mui/material\";\nimport ReactMarkdown from \"react-markdown\";\nimport \"react-markdown-editor-lite/lib/index.css\";\nimport dynamic from \"next/dynamic\";\nimport style from \"@/styles/markdown-styles.module.css\";\n\n\nconst ReactPlayer = dynamic(() => import(\"react-player/lazy\"), {\n  loading: () => <Skeleton height={400} width={\"100%\"} />,\n});\n\nconst Editor = dynamic(() => import(\"react-markdown-editor-lite\"), {\n  loading: () => <Skeleton height={350} width={\"100%\"} />,\n});\n\n\nconst ArenaDescription = ({ readOnly }: ReadOnly) => {\n  const { watch } = useFormContext()\n  const description: arenaDescription = watch(\"description\");\n\n\n  if (!Boolean(description)) {\n    return (\n      <Typography variant=\"LabelLarge\" align=\"center\" sx={{ mt: 2 }}>\n        No Description Provided\n      </Typography>\n    );\n  }\n\n  if (readOnly) {\n    return (\n      <div>\n        {!!description.videoUrl && (\n          <Box sx={{ borderRadius: \"12px\", overflow: \"hidden\" }}>\n            <ReactPlayer url={description.videoUrl} height=\"400px\" width=\"inherit\" />\n          </Box>\n        )}\n        <Typography variant=\"BodyMedium\" className=\"content\">\n          <ReactMarkdown className={style.reactMarkDown}>\n            {description.description}\n          </ReactMarkdown>\n        </Typography>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Controller\n        name={\"description.description\"}\n        defaultValue={\"\"}\n        rules={{\n          required: \"Fest description must be filled\",\n        }}\n        render={({ field }) => {\n          return (\n            <div>\n              <Editor\n                placeholder=\"Enter description with minimum 100 words.\"\n                style={{ height: 350 }}\n                value={field.value}\n                renderHTML={(text: string) => {\n                  field.onChange(text);\n                  return (\n                    <Typography variant=\"BodyMedium\" className=\"content\">\n                      <ReactMarkdown className={style.reactMarkDown}>\n                        {text}\n                      </ReactMarkdown>\n                    </Typography>\n                  );\n                }}\n              />\n            </div>\n          );\n        }}\n      />\n      <Controller\n        name=\"description.videoUrl\"\n        defaultValue={\"\"}\n        rules={{\n          pattern: {\n            value:\n              /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi,\n            message: \"Please enter a valid URL\",\n          },\n        }}\n        render={({ field: { ref, ...field }, fieldState: { error } }) => (\n          <TextField\n            sx={{ mt: 2 }}\n            placeholder=\"Fest video URL from YouTube, Vimeo, SoundCloud, Facebook, etc\"\n            fullWidth\n            inputProps={{\n              style: {\n                fontWeight: 400,\n                fontSize: \"16px\",\n                lineHeight: \"24px\",\n              }\n            }}\n            InputLabelProps={{\n              style: {\n                fontWeight: 500,\n                fontSize: \"14px\",\n                lineHeight: \"20px\",\n              }\n            }}\n            error={!!error}\n            variant=\"standard\"\n            {...field}\n          />\n        )}\n      />\n    </div>\n  )\n}\n\nexport default ArenaDescription","import { ReadOnly, arenaPrize } from \"./types\";\nimport { Typography, Stack, Box, IconButton, TextField, Skeleton } from \"@mui/material\";\nimport React from \"react\";\nimport { HiOutlineLockClosed, HiOutlineTrash, HiOutlinePlusCircle, } from 'react-icons/hi'\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport dynamic from \"next/dynamic\";\nimport style from \"@/styles/markdown-styles.module.css\";\nimport ReactMarkdown from \"react-markdown\";\nimport { CardContainer, FilledButton } from \"@/styles/theme\";\n\n\nconst Editor = dynamic(() => import(\"react-markdown-editor-lite\"), {\n    loading: () => <Skeleton height={350} width={\"100%\"} />,\n});\n\n\nconst ArenaPrize = ({ readOnly }: ReadOnly) => {\n    const [open, setOpen] = React.useState(false);\n    const prize = [\"title\", \"description.text\"];\n    const { trigger, setValue, getValues, watch } = useFormContext();\n    const prizesArray: Array<arenaPrize> = watch(\"prizes\") || [];\n    console.log(prizesArray);\n\n\n    const handleDelete = (title: string) => {\n        setValue(\n            \"prizes\",\n            prizesArray.filter((prize) => prize.title !== title)\n        );\n    };\n\n    const reset = () => {\n        prize.forEach((p) => {\n            setValue(p, \"\");\n        });\n    };\n\n    const handleSubmit = async (_e: any) => {\n        const isValid = await trigger(prize);\n        if (isValid) {\n            const values = getValues(prize);\n            setValue(\"prizes\", [\n                ...prizesArray,\n                { title: values[0], description: values[1] },\n            ]);\n            console.log(prizesArray);\n            reset();\n            setOpen(false)\n        }\n    };\n    return (\n        <Stack rowGap={2}>\n            <Box>\n                {!readOnly && (\n                    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                        <HiOutlineLockClosed fontSize={\"1.5rem\"} />\n                        <Typography variant=\"TitleMedium\" sx={{ ml: \"12px\" }}>\n                            Is your Event Got Prizes, add from here (Optional)\n                        </Typography>\n                    </Box>\n                )}\n            </Box>\n            <Box>\n                {prizesArray.length === 0 ? (\n                    <Typography variant=\"LabelLarge\" component=\"p\" align=\"center\">\n                        No Prices Added\n                    </Typography>\n                ) : (\n                    <>\n                        {prizesArray.map((prize) => {\n                            return (\n                                <CardContainer sx={{ padding: \"20px 0\", mb: 4, position: \"relative\", backgroundColor: \"surfacevariant.main\", border: 0 }} key={prize.title}>\n                                    {!readOnly && (\n                                        <IconButton\n                                            color=\"error\"\n                                            sx={{ position: \"absolute\", top: \"10px\", right: \"16px\" }}\n                                            onClick={() => {\n                                                handleDelete(prize.title);\n                                            }}\n                                        >\n                                            <HiOutlineTrash />\n                                        </IconButton>\n                                    )}\n                                    <Stack sx={{ margin: \"0 20px\", display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\" }}>\n                                        <Typography variant=\"TitleLarge\" color=\"onsurfacevariant.main\">{prize.title}</Typography>\n                                        <Typography variant=\"BodyLarge\" className=\"content\">\n                                            <ReactMarkdown className={style.reactMarkDown}>\n                                                {prize.description}\n                                            </ReactMarkdown>\n                                        </Typography>\n                                    </Stack>\n                                </CardContainer>\n                            )\n                        })}\n                    </>\n                )}\n            </Box>\n            <Box>\n                {open ? (\n                    <CardContainer\n                        sx={{\n                            width: \"100%\",\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            position: \"relative\",\n                            overflow: \"hidden\",\n                            padding: \"8px 24px\"\n                        }}\n                    >\n                        <Stack direction=\"row\" sx={{ justifyContent: \"space-between\", padding: \"8px 24px 8px 0\" }}>\n                            <IconButton\n                                color=\"error\"\n                                onClick={() => {\n                                    setOpen(false);\n                                    // reset();\n                                }}\n                            >\n                                <HiOutlineTrash />\n                            </IconButton>\n                            <IconButton color=\"primary\"\n                                onClick={handleSubmit}\n                            >\n                                <HiOutlinePlusCircle />\n                            </IconButton>\n                        </Stack>\n                        <Box sx={{ pb: 3 }}>\n                            <Controller\n                                name=\"title\"\n                                defaultValue={\"\"}\n                                rules={{\n                                    required: \"Required\",\n                                }}\n                                render={({\n                                    field: { ref, ...field },\n                                    fieldState: { error },\n                                }) => (\n                                    <TextField\n                                        fullWidth\n                                        margin={\"none\"}\n                                        variant=\"standard\"\n                                        size=\"small\"\n                                        inputProps={{\n                                            style: {\n                                                fontWeight: 400,\n                                                fontSize: \"16px\",\n                                                lineHeight: \"24px\",\n                                            }\n                                        }}\n                                        InputLabelProps={{\n                                            style: {\n                                                fontWeight: 500,\n                                                fontSize: \"14px\",\n                                                lineHeight: \"20px\",\n                                            }\n                                        }}\n                                        label=\"Prize Title, e.g. First prize\"\n                                        error={!!error}\n                                        {...field}\n                                    />\n                                )}\n                            />\n                        </Box>\n                        <Box sx={{ pb: 2 }}>\n                            {/* <Typography variant=\"body2\" sx={{ pb: 0.5 }}>\n                                Track Description\n                            </Typography> */}\n                            <Controller\n                                name={\"description.text\"}\n                                defaultValue={\"\"}\n                                rules={{\n                                    required: \"Price Details here...\",\n                                }}\n                                render={({ field }) => {\n                                    return (\n                                        <div>\n                                            <Editor\n                                                style={{ height: 350 }}\n                                                value={field.value}\n                                                renderHTML={(text: string) => {\n                                                    field.onChange(text);\n                                                    return (\n                                                        <Typography variant=\"BodyMedium\" className=\"content\">\n                                                            <ReactMarkdown className={style.reactMarkDown}>\n                                                                {text}\n                                                            </ReactMarkdown>\n                                                        </Typography>\n                                                    );\n                                                }}\n                                            />\n                                        </div>\n                                    );\n                                }}\n                            />\n                        </Box>\n                    </CardContainer>\n                ) : (!readOnly &&\n                    <FilledButton\n                        fullWidth\n                        onClick={\n                            // handleSubmit\n                            () => setOpen(true)\n                        }\n                    >\n                        <Typography variant=\"LabelLarge\">\n                            Add Prizes\n                        </Typography>\n                    </FilledButton>\n                )}\n            </Box>\n        </Stack>\n    )\n}\n\nexport default ArenaPrize ","import {ReadOnly} from './types';\n\nconst ArenaSchedule = ({readOnly}: ReadOnly) => {\n\n    if (readOnly) {\n        return (\n            <div>Schedule here</div>\n        )\n    }\n\n    return (\n        <div>Schedule here</div>\n    )\n}\n\nexport default ArenaSchedule ","import { ReadOnly, arenaSponsorType, Sponsors } from './types';\nimport { Stack, Box, Typography, Paper, IconButton, TextField, Skeleton, Modal, Grid, MenuItem } from \"@mui/material\";\nimport { HiOutlineLockClosed, HiOutlineXCircle, HiOutlineCloudUpload } from 'react-icons/hi';\nimport Image from \"next/image\";\nimport React from \"react\";\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { useSession } from 'next-auth/react';\nimport { DefaultUser, handleSingleImageUpload } from \"@/backend/functions\";\nimport { nanoid } from \"nanoid\";\nimport dynamic from \"next/dynamic\";\nimport { styled } from \"@mui/system\";\nimport { FilledButton, OutlinedButton } from '@/styles/theme';\nimport { Accept } from 'react-dropzone';\n\nexport const Line = styled(\"div\")({\n    height: \"3px\",\n    flexGrow: 1,\n    borderRadius: \"8px\",\n});\n\nconst PosterContainer = styled(Paper)({\n    borderRadius: \"12px\",\n    height: \"inherit\",\n    width: \"100%\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    padding: \"8px\",\n});\n\n\nconst Dropzone = dynamic(() => import(\"@/components/Dropzone\"), {\n    loading: () => <Skeleton height={400} width={\"100%\"} />,\n});\n\nconst ArenaSponsor = ({ readOnly }: ReadOnly) => {\n    const [open, setOpen] = React.useState(false);\n    const { trigger, setValue, getValues, watch } = useFormContext();\n    const trackArray: Array<arenaSponsorType> = watch(\"sponsor\") || [];\n    const sponsorNew = [\"sponsorTitle\", \"sponsorBanner\"];\n    // const [images, setImages] = React.useState([]);\n    const { data: session } = useSession();\n    console.log(trackArray);\n\n\n    const handleAdd = async (_e: any) => {\n        console.log(\"inside\")\n        const isValid = await trigger(sponsorNew);\n        if (isValid) {\n            const values = getValues(sponsorNew);\n            setValue(\"sponsor\", [\n                ...trackArray,\n                { sponsorLabel: values[0], bannerSize: values[1], sponsor: [] },\n            ]);\n            // console.log(trackArray, \"new array\")\n        }\n    };\n\n    const handleUpload = async (acceptedFiles: Array<File>) => {\n        const user: DefaultUser = await session?.user as DefaultUser;\n        const accessToken = await \"Token \" + user.accessToken\n        const imageUrl = await handleSingleImageUpload(\n            getValues(\"festId\"),\n            acceptedFiles[0],\n            accessToken\n        );\n\n        if (!!imageUrl) {\n            // setImages(images.push(imageUrl));\n            const isValid = await trigger(sponsorNew);\n            if (isValid) {\n                const values = getValues(sponsorNew)\n                console.log(values);\n                // const values = [\"Gold\", \"Silver\"]\n                const newSponsor: Sponsors = { imageUrl, id: nanoid() };\n                console.log(newSponsor);\n                // setValue(`${(trackArray.filter((track) => track.sponsorLabel === values[0]))}`, [\n                //     ...trackArray.filter((track) => track.sponsorLabel === values[0]), {\n                //         imageUrl: imageUrl, id: nanoid()\n                //     }\n                // ])\n                // let index: number = 0;\n\n                for (let i in trackArray) {\n                    if (values[0] == trackArray[i].sponsorLabel) {\n                        console.log(i)\n                        // index = i;\n                    }\n                }\n                // setValue(`sponsor[${index}].sponsor`, [\n                //     ...trackArray[index].sponsor,\n                //     { imageUrl: imageUrl, id: nanoid() },\n                // ]);\n\n                // setValue(\n                //     \"sponsor[0].sponsors.\" + values[0],\n                //     !!trackArray[values[0]]\n                //         ? [...trackArray, { sponsorLabel: values[0], bannerSize: values[1], sponsors: [] }]\n                //         : [newSponsor]\n                // );\n                // console.log(\"sponsors.\" + values[0]);\n            }\n        } else {\n            alert(\"Image Upload Error\");\n        }\n    }\n\n\n    // if (readOnly) {\n    //     return (\n    //         <div>Sponsor Section</div>\n    //     )\n    // }\n\n    return (\n        <Stack rowGap={2}>\n            {!readOnly && (\n                <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                    <HiOutlineLockClosed fontSize={\"1.5rem\"} />\n                    <Typography variant=\"TitleMedium\" sx={{ fontWeight: 500, ml: \"12px\" }}>\n                        Got any Sponsors? Add here (Optional)\n                    </Typography>\n                </Box>\n            )}\n            <Box>\n                {trackArray.length === 0 ? (\n                    <Typography variant=\"LabelLarge\" align=\"center\">\n                        No Sponsors Added\n                    </Typography>\n                ) : (\n                    <>\n                        {trackArray.map((track) => {\n                            return (\n                                <Box key={track.sponsorLabel}>\n                                    <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                        <Line sx={{ backgroundColor: track.sponsorLabel || `rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})` }} />\n                                        <Typography variant=\"BodyMedium\" sx={{ textTransform: \"capitalize\" }}>\n                                            {track.sponsorLabel}\n                                        </Typography>\n                                        <Line sx={{ backgroundColor: track.sponsorLabel || `rgb(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)})` }} />\n                                    </Stack>\n                                    <Grid container sx={{ padding: \"16px 8px 8px\" }} spacing={2}>\n                                        {track.sponsor &&\n                                            track.sponsor.map((sponsor: Sponsors) => (\n                                                <Grid item xs={track.bannerSize * 3} key={sponsor.id}>\n                                                    <PosterContainer\n                                                        elevation={2}\n                                                        sx={{ height: track.bannerSize * 100 }}\n                                                    >\n                                                        {!readOnly && (\n                                                            <IconButton\n                                                                size=\"small\"\n                                                                color=\"secondary\"\n                                                                sx={{\n                                                                    position: \"absolute\",\n                                                                    top: \"12px\",\n                                                                    right: \"12px\",\n                                                                    zIndex: 10,\n                                                                }}\n                                                            // onClick={() => handleDelete(props.label, poster.id)}\n                                                            >\n                                                                <HiOutlineXCircle />\n                                                            </IconButton>\n                                                        )}\n                                                        <Image\n                                                            height={track.bannerSize * 100 || 100}\n                                                            width={track.bannerSize * 100 || 100}\n                                                            layout=\"responsive\"\n                                                            objectFit={\"contain\"}\n                                                            src={sponsor.imageUrl}\n                                                            alt={sponsor.imageUrl + \" sponsor poster\"}\n                                                        />\n                                                    </PosterContainer>\n                                                </Grid>\n                                            ))}\n                                        {!readOnly && (\n                                            <Grid item xs={track.bannerSize * 3} sx={{ height: track.bannerSize * 100 }}>\n                                                <PosterContainer elevation={2}>\n                                                    <Dropzone\n                                                        multiple={true}\n                                                        accept={\"image/jpeg, image/jpg, image/png\" as unknown as Accept}\n                                                        maxFiles={10}\n                                                        onDrop={handleUpload}\n                                                    >\n                                                        <HiOutlineCloudUpload fontSize=\"1.5rem\" />\n                                                    </Dropzone>\n                                                </PosterContainer>\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </Box>\n                            )\n                        })}\n                    </>\n                )}\n            </Box>\n            <Box>\n                {open ? (\n                    <>\n                        <Modal open={open} aria-labelledby=\"modal-modal-title\"\n                            aria-describedby=\"modal-modal-description\">\n                            <Grid container>\n                                <Grid item xs={2} md={4} sx={{ textAlign: \"center\", backgroundColor: \"white\", position: \"absolute\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\", justifyContent: \"space-between\", alignContent: \"center\" }}>\n                                    <Stack rowGap={6} sx={{ margin: \"20px 40px\" }}>\n                                        <Typography id=\"modal-modal-title\" variant=\"TitleMedium\">\n                                            Sponsor Title and Banner Size\n                                        </Typography>\n                                        <Grid\n                                            container\n                                            alignItems=\"flex-end\"\n                                            justifyContent=\"space-between\"\n                                            spacing={3}\n                                        >\n                                            <Grid item xs={12} sx={{ textAlign: 'left' }}>\n                                                <Typography variant=\"BodyMedium\" sx={{ mb: 1 }}>Sponsor Label</Typography>\n                                                <Controller\n                                                    name=\"sponsorTitle\"\n                                                    defaultValue={\"\"}\n                                                    rules={{\n                                                        required: \"Please provide Label for your Sponsor\",\n                                                    }}\n                                                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                                                        <TextField\n                                                            size=\"small\"\n                                                            fullWidth\n                                                            variant=\"outlined\"\n                                                            inputProps={{\n                                                                style: {\n                                                                    fontWeight: 400,\n                                                                    fontSize: \"16px\",\n                                                                    lineHeight: \"24px\",\n                                                                }\n                                                            }}\n                                                            InputLabelProps={{\n                                                                style: {\n                                                                    fontWeight: 500,\n                                                                    fontSize: \"14px\",\n                                                                    lineHeight: \"20px\",\n                                                                }\n                                                            }}\n                                                            error={!!error}\n                                                            helperText={error ? error.message : null}\n                                                            {...field}\n                                                        />\n                                                    )}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} sx={{ textAlign: 'left' }}>\n                                                <Typography variant=\"BodyMedium\" sx={{ mb: 1 }}>Select Event Type</Typography>\n                                                <Controller\n                                                    name=\"sponsorBanner\"\n                                                    defaultValue={\"\"}\n                                                    rules={{\n                                                        required: \"Please provide a title for your arena\",\n                                                    }}\n                                                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                                                        <TextField\n                                                            size=\"small\"\n                                                            select\n                                                            placeholder={\"Select Type\"}\n                                                            fullWidth\n                                                            inputProps={{\n                                                                style: {\n                                                                    fontWeight: 400,\n                                                                    fontSize: \"16px\",\n                                                                    lineHeight: \"24px\",\n                                                                }\n                                                            }}\n                                                            InputLabelProps={{\n                                                                style: {\n                                                                    fontWeight: 500,\n                                                                    fontSize: \"14px\",\n                                                                    lineHeight: \"20px\",\n                                                                }\n                                                            }}\n                                                            {...field}\n                                                            error={!!error}\n                                                            {...field}\n                                                            ref={null}\n                                                        >\n                                                            <MenuItem value={4}>{\"1 Banner in a row\"}</MenuItem>\n                                                            <MenuItem value={3}>{\"2 Banners in a row\"}</MenuItem>\n                                                            <MenuItem value={2}>{\"3 Banners in a row\"}</MenuItem>\n                                                            <MenuItem value={1}>{\"4 Banneers in a row\"}</MenuItem>\n                                                        </TextField>\n                                                    )}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                        <Stack direction=\"row\" sx={{ justifyContent: \"space-evenly\", display: \"flex\", flexDirection: \"row\" }}>\n                                            <FilledButton\n                                                type=\"submit\"\n                                                onClick={(e) => {\n                                                    handleAdd(e)\n                                                    setOpen(false)\n                                                }}\n                                                color=\"primary\"\n                                                variant=\"contained\" sx={{ mb: \"10px\" }}\n                                            >\n                                                Proceed\n                                            </FilledButton>\n                                            <OutlinedButton onClick={() => setOpen(false)} variant=\"outlined\" size=\"small\" sx={{ mb: \"10px\" }}>\n                                                <Typography variant=\"LabelLarge\" sx={{ fontWeight: 500 }}>\n                                                    Cancel\n                                                </Typography>\n                                            </OutlinedButton>\n                                        </Stack>\n                                    </Stack>\n                                </Grid>\n                            </Grid>\n                        </Modal>\n                    </>\n                ) : (!readOnly &&\n                    <FilledButton\n                        color=\"primary\"\n                        variant=\"contained\"\n                        fullWidth\n                        onClick={\n                            // handleSubmit\n                            () => setOpen(true)\n                        }\n                    >\n                        <Typography variant=\"LabelLarge\">\n                            Add Sponsors\n                        </Typography>\n                    </FilledButton>\n                )}\n            </Box>\n        </Stack>\n    )\n}\n\nexport default ArenaSponsor;","import React from \"react\";\nimport { Typography, Stack, Box, IconButton, Skeleton, TextField } from \"@mui/material\";\nimport Image from \"next/image\";\nimport { arenaTrack, ReadOnly } from './types'\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { HiOutlineXCircle, HiOutlineCloudUpload, HiOutlineTrash, HiOutlinePlusCircle, HiOutlineLockClosed } from \"react-icons/hi\";\nimport dynamic from 'next/dynamic';\nimport { handleSingleImageUpload } from \"@/backend/functions\";\nimport { useSession } from 'next-auth/react';\nimport { DefaultUser } from \"@/backend/functions\";\nimport { nanoid } from \"nanoid\";\nimport { CardContainer, FilledButton } from \"@/styles/theme\";\nimport { Accept } from 'react-dropzone';\n\n\nconst Dropzone = dynamic(() => import(\"@/components/Dropzone\"), {\n    loading: () => <Skeleton height={400} width={\"100%\"} />,\n});\n\nconst ArenaTracks = ({ readOnly }: ReadOnly) => {\n    const [open, setOpen] = React.useState(false);\n    const [image, setImage] = React.useState(\"\");\n    const { trigger, setValue, getValues, watch } = useFormContext();\n    const trackArray: Array<arenaTrack> = watch(\"tracks\") || [];\n    const trackFields = [\"trackTitle\", \"trackDescription\"];\n    const { data: session } = useSession();\n    console.log(trackArray);\n\n    const handleUpload = async (acceptedFiles: Array<File>) => {\n        const user: DefaultUser = await session?.user as DefaultUser;\n        const accessToken = await \"Token \" + user.accessToken\n        const imageUrl = await handleSingleImageUpload(\n            getValues(\"festId\"),\n            acceptedFiles[0],\n            accessToken\n        );\n\n        if (!!imageUrl) {\n            setImage(imageUrl);\n        } else {\n            alert(\"Image Upload Error\");\n        }\n    };\n\n    const handleDelete = (id: string) => {\n        setValue(\n            \"tracks\",\n            trackArray.filter((track) => track.id !== id)\n        );\n    };\n\n    const reset = () => {\n        trackFields.forEach((field) => {\n            setValue(field, \"\");\n        });\n        setImage(\"\");\n    };\n\n    const handleSubmit = async (_e: any) => {\n        const isValid = await trigger(trackFields);\n        if (isValid) {\n            const values = getValues(trackFields);\n            setValue(\"tracks\", [\n                ...trackArray,\n                { imageUrl: image, name: values[0], description: values[1], id: nanoid(7) },\n            ]);\n            console.log(trackArray);\n            reset();\n            setOpen(false)\n        }\n    };\n\n\n    return (\n        <Stack rowGap={2}>\n            {!readOnly && (\n                <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n                    <HiOutlineLockClosed fontSize={\"1.5rem\"} />\n                    <Typography variant=\"TitleMedium\" sx={{ ml: \"12px\" }}>\n                        Create Tracks (Optional)\n                    </Typography>\n                </Box>\n            )}\n            <Box>\n                {trackArray.length === 0 ? (\n                    <Typography variant=\"LabelLarge\" component=\"p\" align=\"center\">\n                        No Tracks Added\n                    </Typography>\n                ) : (\n                    <>\n                        {trackArray.map((track) => {\n                            return (\n                                <CardContainer elevation={1} sx={{ padding: \"20px 0\", backgroundColor: \"surfacevariant.main\", mb: 4, position: \"relative\", border: 0 }} key={track.id}>\n                                    {!readOnly && (\n                                        <IconButton\n                                            color=\"error\"\n                                            sx={{ position: \"absolute\", top: \"10px\", right: \"16px\" }}\n                                            onClick={() => {\n                                                handleDelete(track.id);\n                                            }}\n                                        >\n                                            <HiOutlineTrash />\n                                        </IconButton>\n                                    )}\n                                    <Stack sx={{ margin: \"0 20px\", display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-start\" }}>\n                                        <Image src={track.imageUrl || `https://source.unsplash.com/400x120/?technology`}\n                                            height={140}\n                                            width={140}\n                                            objectFit=\"contain\"\n                                            alt={track.name} />\n                                        <Stack sx={{ ml: \"36px\" }}>\n                                            <Typography variant=\"TitleLarge\" sx={{ mb: \"10px\" }}>{track.name}</Typography>\n                                            <Typography variant=\"BodyLarge\" color=\"onsurfacevariant.main\" sx={{ maxWidth: \"50vw\" }}>{track.description}</Typography>\n                                        </Stack>\n                                    </Stack>\n                                </CardContainer>\n                            )\n                        })}\n                    </>\n                )}\n            </Box>\n            <Box>\n                {open ? (\n                    <CardContainer elevation={2}\n                        sx={{\n                            height: 300,\n                            width: \"100%\",\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            position: \"relative\",\n                            overflow: \"hidden\",\n                            padding: \"8px 24px 24px 24px\"\n                        }}\n                    >\n                        <Stack direction=\"row\" sx={{ justifyContent: \"space-between\", padding: \"8px 24px\" }}>\n                            <IconButton\n                                color=\"error\"\n                                onClick={() => {\n                                    setOpen(false);\n                                    reset();\n                                }}\n                            >\n                                <HiOutlineTrash />\n                            </IconButton>\n                            <IconButton color=\"primary\"\n                                onClick={handleSubmit}\n                            >\n                                <HiOutlinePlusCircle />\n                            </IconButton>\n                        </Stack>\n                        <Stack direction=\"row\" columnGap={2}>\n                            <Box width=\"40%\" sx={{ position: \"relative\", height: \"100%\" }}>\n                                {!!image ? (\n                                    <>\n                                        <IconButton\n                                            size=\"small\"\n                                            color=\"secondary\"\n                                            sx={{\n                                                position: \"absolute\",\n                                                top: \"12px\",\n                                                right: \"12px\",\n                                                zIndex: 10,\n                                            }}\n                                            onClick={() => setImage(\"\")}\n                                        >\n                                            <HiOutlineXCircle />\n                                        </IconButton>\n                                        <Image\n                                            src={image}\n                                            layout=\"fill\"\n                                            objectFit={\"cover\"}\n                                            alt={\"Uploaded Poster\"}\n                                        />\n                                    </>\n                                ) : (\n                                    <Dropzone\n                                        multiple={false}\n                                        accept={\"image/jpeg, image/jpg, image/png\" as unknown as Accept}\n                                        maxFiles={1}\n                                        onDrop={handleUpload}\n                                    >\n                                        <Stack sx={{ mb: 1, width: \"90%\" }} alignItems=\"center\" spacing={2}>\n                                            <HiOutlineCloudUpload fontSize=\"3rem\" />\n                                            <Typography variant=\"TitleMedium\">\n                                                Drop poster here or click to Browse\n                                            </Typography>\n                                            <Typography variant=\"LabelMedium\" color=\"onsurfacevariant.main\" sx={{ textAlign: \"center\" }}>\n                                                Accepts images (Png, Jpeg, Jpg) of dimension 640×360 or larger\n                                                upto 10Mb\n                                            </Typography>\n                                        </Stack>\n                                    </Dropzone>\n                                )}\n                            </Box>\n                            <Stack width=\"60%\">\n                                <Box sx={{ pb: 2 }}>\n                                    {/* <Typography variant=\"h6\">\n                                        Track Title\n                                    </Typography> */}\n                                    <Controller\n                                        name=\"trackTitle\"\n                                        defaultValue={\"\"}\n                                        rules={{\n                                            required: \"Required\",\n                                        }}\n                                        render={({\n                                            field: { ref, ...field },\n                                            fieldState: { error },\n                                        }) => (\n                                            <TextField\n                                                fullWidth\n                                                margin={\"none\"}\n                                                variant=\"outlined\"\n                                                inputProps={{\n                                                    style: {\n                                                        fontWeight: 400,\n                                                        fontSize: \"16px\",\n                                                        lineHeight: \"24px\",\n                                                    }\n                                                }}\n                                                InputLabelProps={{\n                                                    style: {\n                                                        fontWeight: 500,\n                                                        fontSize: \"14px\",\n                                                        lineHeight: \"20px\",\n                                                    }\n                                                }}\n                                                label=\"Track Title\"\n                                                error={!!error}\n                                                {...field}\n                                            />\n                                        )}\n                                    />\n                                </Box>\n                                {/* <Typography variant=\"h6\">\n                                    Track Description\n                                </Typography> */}\n                                <Controller\n                                    name=\"trackDescription\"\n                                    defaultValue={\"\"}\n                                    rules={{\n                                        required: \"Required\",\n                                    }}\n                                    render={({ field: { ref, ...field }, fieldState: { error } }) => (\n                                        <TextField\n                                            placeholder=\"Track Description\"\n                                            inputProps={{\n                                                style: {\n                                                    fontWeight: 400,\n                                                    fontSize: \"16px\",\n                                                    lineHeight: \"24px\",\n                                                }\n                                            }}\n                                            InputLabelProps={{\n                                                style: {\n                                                    fontWeight: 500,\n                                                    fontSize: \"14px\",\n                                                    lineHeight: \"20px\",\n                                                }\n                                            }}\n                                            fullWidth\n                                            multiline\n                                            rows={4}\n                                            variant=\"filled\"\n                                            error={!!error}\n                                            {...field}\n                                        />\n                                    )}\n                                />\n                            </Stack>\n                        </Stack>\n                    </CardContainer>\n                ) : (!readOnly &&\n                    <FilledButton\n                        fullWidth\n                        onClick={\n                            // handleSubmit\n                            () => setOpen(true)\n                        }\n                    >\n                        <Typography variant=\"LabelLarge\">\n                            Add Tracks\n                        </Typography>\n                    </FilledButton>\n                )}\n            </Box>\n        </Stack>\n    )\n}\n\nexport default ArenaTracks\n\n\n// const TrackCard = (props: arenaTrack) => {\n//   return (\n//     <Paper sx={{padding: \"20px 0\"}}>\n//         <Stack sx={{margin: \"0 20px\", display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-start\"}}>\n//                   <Image src={props.imageUrl || `https://source.unsplash.com/400x120/?technology`}\n//                 height={140}\n//                 width={140}\n//                 objectFit=\"contain\"\n//                 alt={props.name} />\n//             <Stack sx={{ml: \"20px\"}}>\n//                 <Typography variant=\"h6\" sx={{mb: \"10px\"}}>{props.name}</Typography>\n//                 <Typography variant=\"body2\" sx={{maxWidth: \"30vw\"}}>{props.description}</Typography>\n//             </Stack>\n//         </Stack>\n//     </Paper>\n//   );\n// }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reactMarkDown\":\"markdown-styles_reactMarkDown__k3MfX\"};"],"names":["handleSingleImageUpload","festId","file","accessToken","uploadFormData","FormData","append","name","console","log","res","fetch","process","method","headers","Authorization","body","url","ok","json","handleProfileImageUpload","email","ReactPlayer","dynamic","__webpack_require__","e","then","bind","loading","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Skeleton","height","width","Editor","ArenaDescription","readOnly","param","watch","useFormContext","description","jsxs","div","videoUrl","Box","sx","borderRadius","overflow","Typography","variant","className","ReactMarkdown","style","Controller","defaultValue","rules","required","render","field","placeholder","value","renderHTML","onChange","text","pattern","message","ref","fieldState","error","TextField","mt","fullWidth","inputProps","fontWeight","fontSize","lineHeight","InputLabelProps","align","__webpack_exports__","ArenaPrize","open","setOpen","React","prize","trigger","setValue","getValues","prizesArray","handleDelete","filter","title","reset","forEach","p","handleSubmit","_e","isValid","values","Stack","rowGap","display","alignItems","HiOutlineLockClosed","ml","length","component","Fragment","map","CardContainer","padding","mb","position","backgroundColor","border","IconButton","color","top","right","onClick","HiOutlineTrash","margin","flexDirection","justifyContent","direction","HiOutlinePlusCircle","pb","size","label","FilledButton","ArenaSchedule","Line","styled","flexGrow","PosterContainer","Paper","Dropzone","Promise","all","ArenaSponsor","trackArray","sponsorNew","data","session","useSession","handleAdd","sponsorLabel","bannerSize","sponsor","handleUpload","acceptedFiles","user","imageUrl","newSponsor","id","nanoid","i","alert","spacing","track","Math","floor","random","concat","textTransform","Grid","container","item","xs","elevation","zIndex","HiOutlineXCircle","Image","layout","objectFit","src","alt","multiple","accept","maxFiles","onDrop","HiOutlineCloudUpload","Modal","aria-labelledby","aria-describedby","md","textAlign","left","transform","alignContent","helperText","select","MenuItem","type","OutlinedButton","ArenaTracks","image","setImage","trackFields","maxWidth","columnGap","multiline","rows","module","exports"],"sourceRoot":""}