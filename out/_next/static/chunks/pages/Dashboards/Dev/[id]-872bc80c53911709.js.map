{"version":3,"file":"static/chunks/pages/Dashboards/Dev/[id]-872bc80c53911709.js","mappings":"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","sources":["webpack://_N_E/?f4ad","webpack://_N_E/./content/Links.ts","webpack://_N_E/./lib/firebase.js","webpack://_N_E/./src/components/User/Dashboard/Settings.tsx","webpack://_N_E/./pages/Dashboards/Dev/[id].tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/Dashboards/Dev/[id]\",\n      function () {\n        return require(\"private-next-pages/Dashboards/Dev/[id].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/Dashboards/Dev/[id]\"])\n      });\n    }\n  ","export const InternalLinks = {\n  LANDING_PAGE: \"/\",\n  SIGNIN_PAGE: \"/signin\",\n  SIGNUP_PAGE: \"/signup\",\n  ONBOARDING_PAGE: \"/onboarding\",\n  DEV_DASHBOARD: \"/Dashboards/Dev/\",\n  USER_DASHBOARD: \"/Dashboards/User/\",\n  ADMIN_DASHBOARD: \"/Dashboards/Admin/\",\n\n  EXPLORE_PAGE: \"/Explore/\",\n  ORGANISE_PAGE: \"/Explore/Organise\",\n  LABS_PAGE: \"/Explore/Labs/\",\n\n  CODEARENA_DASHBOARD_LINK: \"/Explore/CodeArena/Dashboard/\",\n  CODEARENA_DASHBOARD_ROUTE: \"/Explore/CodeArena/Dashboard/\",\n  CODEARENA_EDITCODEARENA: \"/Explore/CodeArena/EditCodeArena/\",\n  CODEARENA_PREVIEW: \"/Explore/CodeArena/Preview/\",\n  HACK_DASHBOARD_LINK: \"/Explore/Hack/Dashboard/\",\n  HACK_DASHBOARD_ROUTE: \"/Explore/Hack/Dashboard/\",\n  HACK_EDITHACK: \"/Explore/Hack/EditHack/\",\n  HACK_EDITHACK_ROUTE: \"/Explore/Hack/EditHack/\",\n  HACK_PREVIEW: \"/Explore/Hack/Preview/\",\n\n  BLOGS_PAGE: \"/blog\",\n  CAREERS_PAGE: \"/About/Careers\",\n  COMPANY_PAGE: \"/About/Company\",\n  CONTACT_US_PAGE: \"/About/ContactUs\",\n  REVIEWS_PRESS_PAGE: \"/About/ReviewsPress\",\n  TERMS_PRIVACY_PAGE: \"/About/TermsPrivacy\",\n  TERMS_CONDITIONS_PAGE: \"/About/TermsConditions\",\n  HIRE_DEVS_PAGE: \"/Customers/Hire-Devs\",\n  OUTSOURCE_PAGE: \"/Customers/Outsource\",\n  PRICING_PAGE: \"/Customers/Pricing\",\n  SPONSOR_PAGE: \"/Customers/Sponsor\",\n  EXTENSIONS_PAGE: \"/Product/Extensions\",\n  CHANGE_LOG_PAGE: \"/Product/ChangeLog\",\n  PLAYGROUND_PAGE: \"/Product/Playground\",\n  REQUEST_FEATURE_PAGE: \"/Product/RequestFeature\",\n  STATUS_PAGE: \"/Product/Status\",\n  COMET_PROFILE_PAGE: \"/Developers/Profile\",\n  COMMUNITY_PAGE: \"/Developers/Community/\",\n  EVANGELISTS_PAGE: \"/Developers/Evangelists/\",\n  GET_HIRED_PAGE: \"/Developers/GetHired\",\n\n  PROFILE_PAGE: \"/Dashboards/Dev/\"\n};\n\nexport const externalLinkProps = {\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n};\n\nexport const ExternalLinks = {\n  BLOGS_PAGE: {\n    href: \"https://cometlabs.in/About/Blogs\",\n    ...externalLinkProps,\n  },\n  LABS_PAGE: {\n    href: \"https://cometlabs.in/lab/\",\n    ...externalLinkProps,\n  },\n  CAREERS_PAGE: {\n    href: \"https://cometlabs.in/About/Careers\",\n    ...externalLinkProps,\n  },\n  COMPANY_PAGE: {\n    href: \"https://cometlabs.in/About/Company\",\n    ...externalLinkProps,\n  },\n  CONTACT_US_PAGE: {\n    href: \"https://cometlabs.in/About/ContactUs\",\n    ...externalLinkProps,\n  },\n  REVIEWS_PRESS_PAGE: {\n    href: \"https://cometlabs.in/About/ReviewsPress\",\n    ...externalLinkProps,\n  },\n  TERMS_PRIVACY_PAGE: {\n    href: \"https://cometlabs.in/About/TermsPrivacy\",\n    ...externalLinkProps,\n  },\n  TERMS_CONDITIONS_PAGE: {\n    href: \"https://cometlabs.in/About/TermsConditions\",\n    ...externalLinkProps,\n  },\n  HIRE_DEVS_PAGE: {\n    href: \"https://cometlabs.in/Customers/Hire-Devs\",\n    ...externalLinkProps,\n  },\n  OUTSOURCE_PAGE: {\n    href: \"https://cometlabs.in/Customers/Outsource\",\n    ...externalLinkProps,\n  },\n  PRICING_PAGE: {\n    href: \"https://cometlabs.in/Customers/Pricing\",\n    ...externalLinkProps,\n  },\n  SPONSOR_PAGE: {\n    href: \"https://cometlabs.in/Customers/Sponsor\",\n    ...externalLinkProps,\n  },\n  EXTENSIONS_PAGE: {\n    href: \"https://cometlabs.in/Product/Extensions\",\n    ...externalLinkProps,\n  },\n  CHANGE_LOG_PAGE: {\n    href: \"https://cometlabs.in/Product/ChangeLog\",\n    ...externalLinkProps,\n  },\n  PLAYGROUND_PAGE: {\n    href: \"https://cometlabs.in/Product/Playground\",\n    ...externalLinkProps,\n  },\n  REQUEST_FEATURE_PAGE: {\n    href: \"https://cometlabs.in/Product/RequestFeature\",\n    ...externalLinkProps,\n  },\n  STATUS_PAGE: {\n    href: \"https://cometlabs.in/Product/Status\",\n    ...externalLinkProps,\n  },\n  COMET_PROFILE_PAGE: {\n    href: \"https://cometlabs.in/Developers/Profile\",\n    ...externalLinkProps,\n  },\n  COMMUNITY_PAGE: {\n    href: \"https://cometlabs.in/Developers/Community\",\n    ...externalLinkProps,\n  },\n  EVANGELISTS_PAGE: {\n    href: \"https://cometlabs.in/Developers/Evangelists\",\n    ...externalLinkProps,\n  },\n  GET_HIRED_PAGE: {\n    href: \"https://cometlabs.in/Developers/GetHired\",\n    ...externalLinkProps,\n  },\n  COMETLABS_FACEBOOK: {\n    href: \"https://www.facebook.com/cometlabs.in/\",\n    ...externalLinkProps,\n  },\n  COMETLABS_INSTAGRAM: {\n    href: \"https://www.instagram.com/cometlabs/\",\n    ...externalLinkProps,\n  },\n  COMETLABS_LINKEDIN: {\n    href: \"https://www.linkedin.com/company/cometlabs/\",\n    ...externalLinkProps,\n  },\n  COMETLABS_TWITTER: {\n    href: \"https://twitter.com/cometlabs_ai\",\n    ...externalLinkProps,\n  },\n  COMETLABS_LINKTREE: {\n    href: \"https://linktr.ee/cometlabs\",\n    ...externalLinkProps,\n  },\n  COMETLABS_YOUTUBE: {\n    href: \"https://www.youtube.com/channel/UC9dP1nUtKZnP4Q3YtLTXVLQ\",\n    ...externalLinkProps,\n  },\n};\n","import { getAuth, RecaptchaVerifier } from \"firebase/auth\";\nimport { initializeApp } from 'firebase/app';\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBaiR9X2CZC4mNYeI1iaxI1DIQUQ7iuR2o\",\n    authDomain: \"cometlabs.firebaseapp.com\",\n    projectId: \"cometlabs\",\n    storageBucket: \"cometlabs.appspot.com\",\n    messagingSenderId: \"798450899254\",\n    appId: \"1:798450899254:web:f803d941581c72b60f7b97\"\n}\n\nconst app = initializeApp(firebaseConfig)\nvar auth = getAuth()\nexport { auth, app }","import { FilledButton, OutlinedButton } from \"@/styles/theme\";\nimport { Box, Grid, InputAdornment, TextField, Typography } from \"@mui/material\";\nimport { useSnackbar } from \"notistack\";\n// import { useForm, Controller } from \"react-hook-form\";\nimport * as React from \"react\";\nimport MuiPhoneNumber from \"material-ui-phone-number\";\nimport { ConfirmationResult, RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { InternalLinks } from \"@/content/Links\";\nimport { ResumeInfo } from \"./types\";\n// import * as NextAuth from \"next-auth/react\";\n// import { useRouter } from \"next/router\";\n// import { InternalLinks } from \"@/content/Links\";\n\ninterface SettingsNumber {\n    info: ResumeInfo;\n    Username: string;\n}\n\nconst Settings = ({ info, Username }: SettingsNumber) => {\n    const { enqueueSnackbar } = useSnackbar();\n    const [confResult, setConfResult] = React.useState<ConfirmationResult>();\n\n    const [email, setEmail] = React.useState<string>(\"\")\n    const [emailOtp, setEmailOtp] = React.useState<string>(\"\");\n    const [emailOtpSent, setEmailOtpSent] = React.useState<boolean>(false);\n\n    const [mobile, setMobile] = React.useState<string>(\"\");\n    const [mobileOtp, setMobileOtp] = React.useState<string>(\"\");\n    const [mobileOtpSent, setMobileOtpSent] = React.useState<boolean>(false);\n    const [username, setUser] = React.useState<string>(\"\");\n\n    React.useEffect(() => {\n        const usr = JSON.parse(localStorage.getItem('user')!)\n        setUser(usr.username);\n    }, [])\n\n    const sendOtp = async (data: string, type: string) => {\n        try {\n            let res = await fetch(\n                process.env.NEXT_PUBLIC_API_URL + \"/api/signup/mailotp\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json;charset=utf-8\",\n                    },\n                    body: JSON.stringify({ email: data }),\n                }\n            );\n            if (res.ok) {\n                const mailer = await res.json();\n                if (type === \"RESEND\" && mailer.success) {\n                    enqueueSnackbar(\"OTP sent to \" + data);\n                } else return mailer;\n            } else {\n                throw new Error(\"ON OTP_SEND: Bad response from server\");\n            }\n        } catch (error) {\n            console.log(\"Oops! Unable to send OTP.\");\n        }\n    };\n\n    const handleEmailOtpSend = async () => {\n        console.log(email)\n        const { error } = await sendOtp(email, \"\");\n        if (!!error) {\n            enqueueSnackbar(error, { variant: \"error\" });\n        } else {\n            enqueueSnackbar(\"OTP sent to \" + email, { variant: \"info\" });\n            setEmailOtpSent(true);\n        }\n    }\n\n    return (\n        <div style={{ margin: \"30px 60px\" }}>\n            <Typography variant=\"HeadlineSmall\" color=\"primary\">Personal Details</Typography>\n            <Box sx={{\n                marginTop: 2,\n                alignItems: \"center\",\n                width: \"100%\",\n            }}>\n                <Typography variant=\"LabelLarge\">Change Email Address</Typography>\n                <Grid container spacing={2}>\n                    <Grid item lg={8} sx={{\n                        width: \"100%\", \"& .MuiFormHelperText-root \": {\n                            fontWeight: 500,\n                            fontSize: \"11px\",\n                            lineHeight: \"16px\",\n                        },\n                    }}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            onChange={(e) => { setEmail(e.target.value) }}\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <OutlinedButton\n                                            size=\"small\"\n                                            color=\"primary\"\n                                            variant=\"outlined\"\n                                            sx={{ borderRadius: \"4px\" }}\n                                            onClick={() => { handleEmailOtpSend() }}\n                                        >\n                                            <Typography variant=\"LabelMedium\">Get OTP</Typography>\n                                        </OutlinedButton>\n                                    </InputAdornment>\n                                ),\n                            }}\n                            placeholder={info.email}\n                            autoComplete=\"email\"\n                            ref={null}\n                        />\n                    </Grid>\n                    <Grid item xs={12} lg={4}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            label=\"Enter OTP\"\n                            type=\"number\"\n                            disabled={!emailOtpSent}\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            onChange={(e) => { setEmailOtp(e.target.value) }}\n                            InputProps={{\n                                endAdornment: (\n                                    <FilledButton\n                                        // color=\"primary\"\n                                        disabled={!emailOtpSent}\n                                        onClick={async () => {\n                                            let options = {\n                                                method: \"POST\",\n                                                headers: {\n                                                    \"Content-Type\": \"application/json;charset=utf-8\",\n                                                },\n                                                body: JSON.stringify({ email: email, otp: emailOtp }),\n                                            };\n\n                                            try {\n                                                let res = await fetch(\n                                                    process.env.NEXT_PUBLIC_API_URL + \"/api/verifyotp\",\n                                                    options\n                                                );\n                                                if (res.ok) {\n                                                    const updateemail = await fetch(\n                                                        process.env.NEXT_PUBLIC_API_URL + \"/api/updateEmail\",\n                                                        {\n                                                            method: \"POST\",\n                                                            headers: {\n                                                                \"Content-Type\": \"application/json;charset=utf-8\",\n                                                            },\n                                                            body: JSON.stringify({ newEmail: email }),\n                                                        }\n                                                    )\n                                                    if (updateemail.ok) {\n                                                        enqueueSnackbar(\"Email updated\", { variant: \"success\" });\n                                                        console.log(email, \"updated\")\n                                                    }\n                                                    const verified = await res.json();\n                                                    if (!!verified.temporaryToken) {\n                                                        enqueueSnackbar(\"OTP verified\", { variant: \"success\" });\n                                                    } else {\n                                                        throw new Error(\"ON OTP_VERIFICATION: NO TEMP\");\n                                                    }\n                                                } else {\n                                                    throw new Error(\"ON OTP_VERIFICATION: Bad response from server\");\n                                                }\n                                            } catch (error) {\n                                                enqueueSnackbar(\"Couldn't verify OTP\", { variant: \"error\" });\n                                            }\n                                        }}\n                                    >\n                                        <Typography variant=\"LabelMedium\">Submit</Typography>\n                                    </FilledButton>\n                                ),\n                            }}\n                            ref={null}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box sx={{\n                marginTop: 2,\n                alignItems: \"center\",\n                width: \"100%\",\n            }}>\n                <Typography variant=\"LabelLarge\">Change Mobile Number</Typography>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} lg={8}>\n                        <MuiPhoneNumber\n                            margin=\"normal\"\n                            required\n                            defaultCountry={'in'}\n                            fullWidth\n                            value={info.mobile.toString()}\n                            autoFormat\n                            sx={{\n                                '& .MuiIconButton-sizeMedium': {\n                                    width: \"24px\",\n                                    height: '30px',\n                                    \"& .margin\": {\n                                        width: \"24px\",\n                                        height: '30px',\n                                    }\n                                }\n                            }}\n                            variant=\"outlined\"\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            onChange={(e) => {\n                                setMobile(e.toString().replaceAll(\" \", \"\").replaceAll(\"-\", \"\"))\n                            }}\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position=\"end\">\n                                        <OutlinedButton\n                                            variant=\"outlined\"\n                                            id=\"newid\"\n                                            onClick={() => {\n                                                let verify = new RecaptchaVerifier(\"newid\", {\n                                                    'size': 'invisible',\n                                                    'callback': () => { },\n                                                    'expired-callback': () => { }\n                                                }, auth);\n\n                                                signInWithPhoneNumber(auth, mobile, verify).then((\n                                                    confirmationResult\n                                                ) => {\n                                                    setConfResult(confirmationResult);\n                                                    setMobileOtpSent(true);\n                                                })\n                                                    .catch((err: any) => {\n                                                        console.log(err);\n                                                    });\n                                            }}\n                                        >\n                                            <Typography variant=\"LabelMedium\">Get OTP</Typography>\n                                        </OutlinedButton>\n                                    </InputAdornment>\n                                ),\n                            }}\n                            ref={null}\n                        />\n                    </Grid>\n                    <Grid item xs={12} lg={4}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            label=\"Enter OTP\"\n                            type=\"number\"\n                            disabled={!mobileOtpSent}\n                            inputProps={{\n                                style: {\n                                    fontWeight: 400,\n                                    fontSize: \"16px\",\n                                    lineHeight: \"24px\",\n                                }\n                            }}\n                            InputLabelProps={{\n                                style: {\n                                    fontWeight: 500,\n                                    fontSize: \"14px\",\n                                    lineHeight: \"20px\",\n                                }\n                            }}\n                            onChange={(e) => { setMobileOtp(e.target.value) }}\n                            InputProps={{\n                                endAdornment: (\n                                    <FilledButton\n                                        color=\"primary\"\n                                        disabled={!mobileOtpSent}\n                                        onClick={() => {\n                                            confResult!.confirm(mobileOtp).then(async () => {\n                                                enqueueSnackbar(\"OTP verified\", { variant: \"success\" });\n                                                const updatemobile = await fetch(\n                                                    process.env.NEXT_PUBLIC_API_URL + \"/api/updateEmail\",\n                                                    {\n                                                        method: \"POST\",\n                                                        headers: {\n                                                            \"Content-Type\": \"application/json;charset=utf-8\",\n                                                        },\n                                                        body: JSON.stringify({ newEmail: email }),\n                                                    }\n                                                )\n                                                if (updatemobile.ok) {\n                                                    enqueueSnackbar(\"Email updated\", { variant: \"success\" });\n                                                    console.log(mobile, \"updated\")\n                                                }\n                                            }).catch((_error: any) => {\n                                            });\n                                        }}\n                                    >\n                                        <Typography variant=\"LabelMedium\">Submit</Typography>\n                                    </FilledButton>\n                                ),\n                            }}\n                            ref={null}\n                        />\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box sx={{\n                marginTop: 2,\n                alignItems: \"center\",\n                width: \"100%\",\n            }}>\n                <Typography variant=\"LabelLarge\">Change Username</Typography>\n                <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                    <TextField\n                        margin=\"normal\"\n                        required\n                        sx={{ maxWidth: \"600px\" }}\n                        fullWidth\n                        type=\"text\"\n                        inputProps={{\n                            style: {\n                                fontWeight: 400,\n                                fontSize: \"16px\",\n                                lineHeight: \"24px\",\n                            }\n                        }}\n                        InputLabelProps={{\n                            style: {\n                                fontWeight: 500,\n                                fontSize: \"14px\",\n                                lineHeight: \"20px\",\n                            }\n                        }}\n                        placeholder={Username}\n                        onChange={(e) => {\n                            if (e.target.value.includes(\"@\") || e.target.value.includes(\".\")) {\n                                enqueueSnackbar(\"Username cannot contain @ and .\", { variant: \"error\" });\n                            }\n                            else {\n                                setUser(e.target.value)\n                            }\n                        }}\n                        InputProps={{\n                            endAdornment: (\n                                <OutlinedButton\n                                    color=\"primary\"\n                                    variant=\"outlined\"\n                                    disabled={!username}\n                                    onClick={async () => {\n                                        let user = JSON.parse(localStorage.getItem(\"user\")!);\n                                        const accessToken = \"Token \" + user.accessToken;\n                                        let options = {\n                                            method: \"POST\",\n                                            headers: {\n                                                \"Content-Type\": \"application/json;charset=utf-8\",\n                                                authorization: accessToken\n                                            },\n                                            body: JSON.stringify({ newUsername: username }),\n                                        };\n\n                                        try {\n                                            let res = await fetch(\n                                                process.env.NEXT_PUBLIC_API_URL + \"/api/updateUsername\",\n                                                options\n                                            );\n                                            if (res.ok) {\n                                                enqueueSnackbar(\"Username updated\", { variant: \"success\" });\n                                                user.username = username;\n                                                localStorage.setItem(\"user\", JSON.stringify(user));\n                                                window.location.href = InternalLinks.LANDING_PAGE + \"logout\";\n                                            } else {\n                                                throw new Error(\"ON USERNAME_UPDATE: Bad response from server\");\n                                            }\n                                        } catch (error) {\n                                            enqueueSnackbar(\"Couldn't update username\", { variant: \"error\" });\n                                        }\n                                    }}\n                                >\n                                    <Typography variant=\"LabelMedium\">Submit</Typography>\n                                </OutlinedButton>\n                            ),\n                        }}\n                        ref={null}\n                    />\n                    <FilledButton sx={{ my: \"auto\" }}\n                        color=\"primary\"\n                        disabled={!mobileOtpSent}\n                        onClick={() => {\n                            confResult!.confirm(mobileOtp).then(async () => {\n                                enqueueSnackbar(\"OTP verified\", { variant: \"success\" });\n                                const updatemobile = await fetch(\n                                    process.env.NEXT_PUBLIC_API_URL + \"/api/updateEmail\",\n                                    {\n                                        method: \"POST\",\n                                        headers: {\n                                            \"Content-Type\": \"application/json;charset=utf-8\",\n                                        },\n                                        body: JSON.stringify({ newEmail: email }),\n                                    }\n                                )\n                                if (updatemobile.ok) {\n                                    enqueueSnackbar(\"Email updated\", { variant: \"success\" });\n                                    console.log(mobile, \"updated\")\n                                }\n                            }).catch((_error: any) => {\n                            });\n                        }}\n                    >\n                        <Typography variant=\"LabelMedium\">Submit</Typography>\n                    </FilledButton>\n                </div>\n            </Box>\n        </div>\n    )\n}\n\nexport default Settings;","import { GetServerSideProps } from \"next\";\nimport { getSession } from \"next-auth/react\";\nimport * as React from \"react\";\n\nimport { DefaultUser } from \"@/backend/functions\";\nimport { ResumeDataType, ResumeInfo } from \"@/components/User/Dashboard/types\";\nimport Head from \"next/head\";\nimport { SCORE } from \"@/components/User/Analytics\";\nimport { DashboardProps } from \"@/layout/Dashboard\";\nimport dynamic from \"next/dynamic\";\nimport { MdLeaderboard } from \"react-icons/md\";\nimport { IoMdSettings } from \"react-icons/io\";\nimport { FaUserCircle } from 'react-icons/fa';\nimport Settings from \"@/components/User/Dashboard/Settings\";\nimport { REPOS } from \"@/components/MainArea/ActiveRepos\";\ninterface UserDashboardProps {\n    user: DefaultUser;\n    result: ResumeDataType;\n    info: ResumeInfo;\n    langs: {};\n    score: SCORE,\n    submission: ALLSUBMISSIONS[];\n    freelabs: LABS[];\n    repositories: REPOS[];\n    phone: number,\n}\n\nexport interface LABS {\n    files: {},\n    modifiedAt: Date;\n    question_id: string;\n    type: string;\n    user_id: string;\n    name: string;\n    framework: string;\n    public: boolean;\n    question: string;\n}\n\nexport interface ALLSUBMISSIONS {\n    sub_id: string;\n    question_id: string;\n    user_id: string;\n    type: 'f' | 'h' | 'l';\n    files: Record<string, string>;\n    output: {\n        stderr: string;\n        stdout: string;\n    };\n    screenshot: string;\n    Status: string;\n    Testcase_Passed: number;\n    Testcase_Total: number;\n    Submission_Time: Date;\n    framework: string;\n}\n\n// const Header = dynamic(() => import(\"@/layout/Header\"), {\n//     ssr: false,\n// });\n\nconst Resume = dynamic(() => import(\"@/components/User/Dashboard/Resume\"), {\n    ssr: false,\n});\n\nconst Projects = dynamic(() => import(\"@/components/User/Projects\"), {\n    ssr: false,\n});\n\nconst Dashboard = dynamic(() => import(\"@/layout/Dashboard\"), {\n    ssr: false,\n});\n\nexport default function FestDashboard({ user, result, langs, score, submission, freelabs, repositories }: UserDashboardProps) {\n\n    if (!user)\n        return <div>you have logged out, please login again</div>\n\n    const tabs: DashboardProps[\"tabs\"] = [\n        // { label: `${festname}`, disabled: false, icon: <MdLeaderboard />, component: <Organiser Data={data} Title={`${fest.details.title} Registered Users`} /> },\n        // { label: 'submissions', disabled: false, icon: <MdLeaderboard />, component: <Allsubmissions props={submissions} Title={`${fest.details.title} Submissions`} /> },\n        { label: 'Profile', disabled: false, icon: <FaUserCircle />, component: <Resume isUser ResumeData={result} langs={langs} score={score} freelabs={freelabs} /> },\n        { label: 'Setting', disabled: false, icon: <IoMdSettings />, component: <Settings Username={result.username} info={result.info} /> },\n        { label: 'Projects', disabled: false, icon: <MdLeaderboard />, component: <Projects submission={submission} freelabs={freelabs} repositories={repositories} user={user} /> }\n    ];\n\n\n    return (\n        <>\n            <Head>\n                <title>Dev's Dashboard | COMETLABS</title>\n            </Head>\n            <Dashboard title={\"\"} tabs={tabs} subtitle={user.email} />\n        </>\n    )\n}\n\n\n// export default function FestDashboard() {\n\n\n//     return (\n//         <>\n//             <Head>\n//                 <title>Dashboard | COMETLABS</title>\n//             </Head>\n//             <Header user={user} />\n//             <Resume ResumeData={result} langs={langs} score={score} freelabs={freelabs} />\n//             {submission && submission.length > 0 && <Projects submission={submission} />}\n//         </>\n//     );\n// }\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n    const session = await getSession(context);\n    const { id } = context.query;\n    if (!!session) {\n        const user: DefaultUser = session!.user as DefaultUser;\n        if (id !== user.username) {\n            return {\n                redirect: {\n                    permanent: false,\n                    destination: \"/\",\n                }\n            }\n        }\n        try {\n            const accessToken = \"Token \" + user.accessToken;\n            let [res, submissions, freeproject, repos] = await Promise.all([\n                fetch(\n                    process.env.NEXT_PUBLIC_API_URL + \"/user/getProfile\",\n                    {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                    }\n                ),\n                fetch(\n                    process.env.NEXT_PUBLIC_API_URL + \"/labs/getPlaygroundSubmissions\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                        body: JSON.stringify({ user_id: user.id }),\n                    }\n                ),\n                fetch(\n                    process.env.NEXT_PUBLIC_API_URL + \"/labs/getSavedUserCode\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken\n                        },\n                        body: JSON.stringify({ user_id: user.id })\n                    }\n                ),\n                fetch(\n                    process.env.NEXT_PUBLIC_API_URL + \"/api/getUserRepos\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                    }\n                )\n            ])\n            if (res.ok) {\n                let score = {}\n                let langs = {}\n                const result = await res.json();\n                const freelabs = await freeproject.json();\n                const submission = await submissions.json();\n                const reposi = await repos.json();\n                let repositories = [];\n                if (!reposi.error) {\n                    repositories = reposi.repos;\n                }\n                if (!result.error) {\n                    delete result.email;\n                    const github = result.info.socials.githubUrl\n                    if (github) {\n                        const gitlang = await fetch(\n                            process.env.NEXT_PUBLIC_API_URL + \"/userAnalytics/github/getUserRepoLangs\",\n                            {\n                                method: \"POST\",\n                                headers: {\n                                    \"Content-Type\": \"application/json;charset=utf-8\",\n                                    Authorization: accessToken,\n                                },\n                                body: JSON.stringify({ username: github.replace(\"https://github.com/\", \"\") }),\n                            }\n                        )\n                        const scor = await fetch(\n                            process.env.NEXT_PUBLIC_API_URL + \"/userAnalytics/score/getUserScore\",\n                            {\n                                method: \"POST\",\n                                headers: {\n                                    \"Content-Type\": \"application/json;charset=utf-8\",\n                                    Authorization: accessToken,\n                                },\n                                body: JSON.stringify({ username: result.username, github_username: result.info.socials.githubUrl.replace(\"https://github.com/\", \"\"), leetcode_username: result.info.socials.leetcodeUrl.replace(\"https://leetcode.com/\", \"\") }),\n                            }\n                        )\n                        if (gitlang.ok) {\n                            langs = await gitlang.json();\n                        }\n                        if (scor.ok) {\n                            score = await scor.json();\n                        }\n                    }\n                    return {\n                        props: { user, result, langs, score, submission, freelabs, repositories },\n                    };\n                } else {\n                    console.log(result.error);\n                }\n            } else if (res.status == 401) {\n                return {\n                    redirect: {\n                        permanent: false,\n                        destination: \"/logout\",\n                    }\n                }\n            } else {\n                throw new Error(\"ERROR\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    return {\n        redirect: {\n            permanent: false,\n            destination: \"/signin\",\n        },\n    };\n};\n"],"names":["window","__NEXT_P","push","__webpack_require__","InternalLinks","LANDING_PAGE","SIGNIN_PAGE","SIGNUP_PAGE","ONBOARDING_PAGE","DEV_DASHBOARD","USER_DASHBOARD","ADMIN_DASHBOARD","EXPLORE_PAGE","ORGANISE_PAGE","LABS_PAGE","CODEARENA_DASHBOARD_LINK","CODEARENA_DASHBOARD_ROUTE","CODEARENA_EDITCODEARENA","CODEARENA_PREVIEW","HACK_DASHBOARD_LINK","HACK_DASHBOARD_ROUTE","HACK_EDITHACK","HACK_EDITHACK_ROUTE","HACK_PREVIEW","BLOGS_PAGE","CAREERS_PAGE","COMPANY_PAGE","CONTACT_US_PAGE","REVIEWS_PRESS_PAGE","TERMS_PRIVACY_PAGE","TERMS_CONDITIONS_PAGE","HIRE_DEVS_PAGE","OUTSOURCE_PAGE","PRICING_PAGE","SPONSOR_PAGE","EXTENSIONS_PAGE","CHANGE_LOG_PAGE","PLAYGROUND_PAGE","REQUEST_FEATURE_PAGE","STATUS_PAGE","COMET_PROFILE_PAGE","COMMUNITY_PAGE","EVANGELISTS_PAGE","GET_HIRED_PAGE","PROFILE_PAGE","externalLinkProps","target","rel","ExternalLinks","href","COMETLABS_FACEBOOK","COMETLABS_INSTAGRAM","COMETLABS_LINKEDIN","COMETLABS_TWITTER","COMETLABS_LINKTREE","COMETLABS_YOUTUBE","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","Settings","info","Username","param","enqueueSnackbar","useSnackbar","confResult","setConfResult","React","email","setEmail","emailOtp","setEmailOtp","emailOtpSent","setEmailOtpSent","mobile","setMobile","mobileOtp","setMobileOtp","mobileOtpSent","setMobileOtpSent","username","setUser","usr","JSON","parse","localStorage","getItem","sendOtp","data","type","res","fetch","process","method","headers","body","stringify","ok","mailer","json","success","error","console","log","handleEmailOtpSend","variant","jsx_runtime","jsxs","div","style","margin","jsx","Typography","color","Box","sx","marginTop","alignItems","width","Grid","container","spacing","item","lg","fontWeight","fontSize","lineHeight","TextField","required","fullWidth","id","inputProps","InputLabelProps","onChange","e","value","InputProps","endAdornment","InputAdornment","position","OutlinedButton","size","borderRadius","onClick","placeholder","autoComplete","ref","xs","label","disabled","FilledButton","options","otp","updateemail","newEmail","verified","temporaryToken","MuiPhoneNumber","defaultCountry","toString","autoFormat","height","replaceAll","verify","RecaptchaVerifier","signInWithPhoneNumber","then","confirmationResult","catch","err","confirm","updatemobile","display","justifyContent","maxWidth","includes","user","accessToken","authorization","newUsername","setItem","location","my","Resume","dynamic","Promise","all","bind","ssr","Projects","Dashboard","FestDashboard","result","langs","score","submission","freelabs","repositories","tabs","icon","FaUserCircle","component","isUser","ResumeData","IoMdSettings","MdLeaderboard","Fragment","Head","title","subtitle"],"sourceRoot":""}