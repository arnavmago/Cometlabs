{"version":3,"file":"static/chunks/pages/Explore/CodeArena/Dashboard/Preview/[id]-96471b92c0c931e4.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/material/utils/useControlled.js","webpack://_N_E/./node_modules/@mui/utils/esm/useControlled.js","webpack://_N_E/./node_modules/@mui/utils/esm/useId.js","webpack://_N_E/?cea4","webpack://_N_E/./pages/Explore/CodeArena/Dashboard/Preview/[id].tsx","webpack://_N_E/./src/components/Fest/Dashboard/AllSubmission.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { unstable_useControlled as useControlled } from '@mui/utils';\nexport default useControlled;","/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport default function useControlled({\n  controlled,\n  default: defaultProp,\n  name,\n  state = 'value'\n}) {\n  // isControlled is ignored in the hook dependency lists as it should never change.\n  const {\n    current: isControlled\n  } = React.useRef(controlled !== undefined);\n  const [valueState, setValue] = React.useState(defaultProp);\n  const value = isControlled ? controlled : valueState;\n  if (process.env.NODE_ENV !== 'production') {\n    React.useEffect(() => {\n      if (isControlled !== (controlled !== undefined)) {\n        console.error([`MUI: A component is changing the ${isControlled ? '' : 'un'}controlled ${state} state of ${name} to be ${isControlled ? 'un' : ''}controlled.`, 'Elements should not switch from uncontrolled to controlled (or vice versa).', `Decide between using a controlled or uncontrolled ${name} ` + 'element for the lifetime of the component.', \"The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.\", 'More info: https://fb.me/react-controlled-components'].join('\\n'));\n      }\n    }, [state, name, controlled]);\n    const {\n      current: defaultValue\n    } = React.useRef(defaultProp);\n    React.useEffect(() => {\n      if (!isControlled && defaultValue !== defaultProp) {\n        console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. ` + `To suppress this warning opt to use a controlled ${name}.`].join('\\n'));\n      }\n    }, [JSON.stringify(defaultProp)]);\n  }\n  const setValueIfUncontrolled = React.useCallback(newValue => {\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  }, []);\n  return [value, setValueIfUncontrolled];\n}","import * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId = React['useId' + ''];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/Explore/CodeArena/Dashboard/Preview/[id]\",\n      function () {\n        return require(\"private-next-pages/Explore/CodeArena/Dashboard/Preview/[id].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/Explore/CodeArena/Dashboard/Preview/[id]\"])\n      });\n    }\n  ","import { GetServerSideProps } from \"next\";\nimport { getSession } from \"next-auth/react\";\nimport * as React from \"react\";\nimport { DefaultUser } from \"@/backend/functions\";\n// import Resume from \"@/components/User/Dashboard/Resume\";\nimport { Teamm } from \"@/components/Fest/Dashboard/CreateTeam\";\n// import Invite from \"@/components/Fest/Dashboard/Invite\";\nimport { ResumeDataType } from \"@/components/User/Dashboard/types\";\n// import { useSnackbar } from \"notistack\";\nimport Head from \"next/head\";\nimport { SubmissionData } from \"@/components/Fest/Dashboard/Submission/SubmissonForm\";\nimport { ref } from \"@/components/Fest/Dashboard/Invite\";\n// import Invite from \"@/components/Fest/Dashboard/Invite\";\n// import { TeamDetailComponent } from \"@/components/Fest/Dashboard\";\nimport { CodeArena } from \"@/components/event/types\";\nimport Header from \"@/layout/HeaderLabs\";\nimport { IconButton, Typography } from \"@mui/material\";\nimport { HiArrowRight } from \"react-icons/hi\";\nimport { Tag } from \"@/components/Fest/Dashboard/AllSubmission\";\n\ninterface UserDashboardProps {\n    user: DefaultUser;\n    result: ResumeDataType;\n    teamm: Teamm;\n    submission: SubmissionData;\n    reff: ref;\n    id: string;\n    fest: CodeArena;\n    type: string;\n}\n\nexport type UserProps = {\n    user: DefaultUser;\n};\n\n// const TeamDetailComponent = dynamic(() => import(\"@/components/Fest/Dashboard\"), {\n//     ssr: false,\n// });\n\n// const UnderConstruction = () => {\n//   return (\n//     <Typography sx={{justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}} variant=\"h6\">The Page Under Construction</Typography>\n//   );\n// }\n// { user, result, team, id, submission, reff, hack }: UserDashboardProps\n\nexport default function FestDashboard({ user, teamm, id, submission, fest, type }: UserDashboardProps) {\n    // const { enqueueSnackbar } = useSnackbar();\n    console.log(user);\n\n    // enqueueSnackbar(\"Please Update Your Profile\", { variant: \"info\" })\n    // const tabs: DashboardProps[\"tabs\"] = [\n    // { label: \"Profile Submitted\", disabled: false, icon: <FaUser />, component: <Resume ResumeData={result} /> },\n    // { label: \"Team Section\", disabled: false, icon: <FaUsers />, component: <Team user={user} team={team} id={id} /> },\n    // { label: \"Refer and Earn\", disabled: false, icon: <FaUsers />, component: <Invite user={user} team={team} reff={reff} /> },\n    // { l abel: \"My Submission\", disabled: false, icon: <FaFileAlt />, component: <Submission id={id} props={submission} team={team} /> },\n    // ];\n\n    return (\n        <>\n            <Head>\n                <title>Organiser Dashboard | COMETLABS</title>\n            </Head>\n            <Header type={type} id={id} />\n            <div style={{ margin: \"32px\", marginTop: \"96px\" }}>\n                <div>\n                    <Typography variant=\"HeadlineMedium\">{fest.details.title} Submission Preview</Typography>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                    <div style={{ marginTop: \"32px\" }}>\n                        <Typography paragraph sx={{ mb: 3 }} variant=\"LabelLarge\">TeamName : {teamm.team_name}</Typography>\n                        <Typography paragraph variant=\"TitleMedium\">Team Members Details :</Typography>\n                        {teamm.members.map((member) => {\n                            return (\n                                <div key={member.id} style={{\n                                    display: 'flex'\n                                }}>\n                                    <IconButton sx={{ fontSize: \"small\" }}>< HiArrowRight /></IconButton>\n                                    <Typography paragraph key={member.id} variant=\"LabelLarge\" sx={{ mb: 1 }}>{member.info.name}</Typography>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div style={{ margin: \"32px 0 0 96px\", maxWidth: \"400px\" }}>\n                        <Typography paragraph sx={{ mb: 3 }} variant=\"TitleMedium\">Product Title: {submission.details.title}</Typography>\n                        <Typography paragraph sx={{ mb: 3 }} variant=\"TitleMedium\">Product Description: {submission.details.subtitle}</Typography>\n                        <div style={{ display: \"flex\" }}>\n                            <Typography paragraph sx={{ mb: 3 }} variant=\"TitleMedium\">Technologies: </Typography>\n                            {\n                                submission.details.tags.map((tag, index) => (\n                                    <div style={{ marginLeft: \"6px\" }} key={index}>\n                                        <Tag label={tag.name} key={index} />\n                                    </div>\n                                ))\n                            }\n                        </div>\n                        <Typography paragraph sx={{ mb: 3 }} variant=\"TitleMedium\">Problem Statement: {submission.problem.description}</Typography>\n                        <Typography paragraph sx={{ mb: 3 }} variant=\"TitleMedium\">Proposed Solution: {submission.problem.solution}</Typography>\n                    </div>\n                </div>\n\n            </div >\n        </>\n    )\n}\n\n\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n    const session = await getSession(context);\n    // const { enqueueSnackbar } = useSnackbar();\n    const { id } = context.query;\n\n    if (!!session) {\n        const user: DefaultUser = session.user as DefaultUser;\n        const accessToken = \"Token \" + user.accessToken;\n        const isRegistered = await fetch(\n            process.env.NEXT_PUBLIC_API_URL + \"/organize/isRegistered\",\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                    Authorization: accessToken,\n                },\n                body: JSON.stringify({ eventId: id })\n            }\n        )\n        if (isRegistered.ok) {\n            try {\n                let submission = null;\n                let type = null;\n                let [res, team, festDetails] = await Promise.all([\n                    fetch(process.env.NEXT_PUBLIC_API_URL + \"/user/getProfile\",\n                        {\n                            method: \"GET\",\n                            headers: {\n                                \"Content-Type\": \"application/json;charset=utf-8\",\n                                Authorization: accessToken,\n                            },\n                        }\n                    ),\n                    fetch(process.env.NEXT_PUBLIC_API_URL + \"/organize/getTeam\",\n                        {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json;charset=utf-8\",\n                                Authorization: accessToken,\n                            },\n                            body: JSON.stringify({ eventId: id })\n                        }\n                    ),\n                    fetch(process.env.NEXT_PUBLIC_API_URL + \"/fests/viewFest\",\n                        {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json;charset=utf-8\",\n                                Authorization: accessToken,\n                            },\n                            body: JSON.stringify({ id: id })\n                        }\n                    )\n                ]);\n                if ([team.ok && res.ok]) {\n                    const result = await res.json();\n                    let teamm = await team.json();\n                    const fest = await festDetails.json();\n                    type = fest.type;\n                    if (teamm.error) {\n                        teamm = null;\n                    }\n                    if (teamm && teamm.team_id) {\n                        const [submit] = await Promise.all([\n                            fetch(process.env.NEXT_PUBLIC_API_URL + \"/organize/getsubmission\",\n                                {\n                                    method: \"POST\",\n                                    headers: {\n                                        \"Content-Type\": \"application/json;charset=utf-8\",\n                                        Authorization: accessToken,\n                                    },\n                                    body: JSON.stringify({ eventId: id, team_id: teamm.team_id })\n                                }\n                            ),\n                        ])\n                        if (submit.ok) {\n                            submission = await submit.json();\n                            submission = submission.submission;\n                        }\n                    }\n                    // const reff = await ref.json();\n                    // if (team.error === \"Not Registered\") {\n                    //   return {\n                    //     redirect: {\n                    //       permanent: false,\n                    //       destination: InternalLinks.LANDING_PAGE + \"fest/\" + id,\n                    //     },\n                    //   }\n                    // }\n                    return {\n                        props: {\n                            user,\n                            result,\n                            teamm,\n                            id,\n                            submission,\n                            fest,\n                            type,\n                            // reff,\n                        },\n                    };\n                } else if (team.status == 401) {\n                    return {\n                        redirect: {\n                            permanent: false,\n                            destination: \"/logout\",\n                        }\n                    }\n                } else {\n                    throw new Error(\"ERROR\");\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        } else {\n            return {\n                redirect: {\n                    permanent: false,\n                    destination: \"/\",\n                }\n            }\n        }\n\n    }\n\n    return {\n        redirect: {\n            permanent: false,\n            destination: \"/signin\",\n        },\n    };\n};\n","import { Paper, Grid, Stack, Typography, IconButton, Divider, styled, Chip, alpha } from \"@mui/material\";\nimport { FaLink } from \"react-icons/fa\";\n\nexport const Tag = styled(Chip)(({ theme }) => ({\n    borderRadius: \"4px\",\n    backgroundColor: alpha(theme.palette.primary.main, 0.08),\n    color: theme.palette.primary.main\n}));\n\nexport interface Hack {\n    hack_id: string;\n    Team_Members: Team[];\n    Project_Name: string;\n    Project_Tagline: string;\n    Achievements: [];\n    Project_Links: string[];\n    Problem_Solved: string;\n    Hackathon: {\n        Link: string;\n        Name: string;\n        accessToken: string;\n        festId: string;\n    };\n}\n\ninterface Team {\n    Devfolio_Profile: string;\n    Name: string;\n}\n\nexport interface hacks {\n    hack: Hack[];\n}\n\nconst AllSubmissions = ({ hack }: hacks) => {\n    console.log(hack);\n    return (\n        <div>\n            <Grid container direction=\"row\" spacing={2} justifyContent=\"center\" alignItems=\"center\">\n                {hack.map((hack, index) => {\n                    return (\n                        <Grid item xs={12} sm={6} md={3} key={index}>\n                            <Hack {...hack} />\n                        </Grid>\n                    )\n                })}\n            </Grid>\n        </div>\n    );\n}\n\nconst Hack = (hack: Hack) => {\n    return (\n        <Paper sx={{ height: \"350px\", padding: \"20px 40px\", m: 2, display: \"flex\", flexDirection: \"column\", justifyContent: \"space-around\" }}>\n            <Stack sx={{ position: \"relative\" }}>\n                <Typography variant=\"TitleMedium\" color=\"primary\" sx={{ textAlign: \"center\", pr: \"60px\" }}>{hack.Project_Name}</Typography>\n                {hack.Project_Links && <IconButton sx={{ position: \"absolute\", right: 0 }} href={hack.Project_Links[0]} target=\"_blank\" color=\"primary\"><FaLink /></IconButton>}\n            </Stack>\n            <Divider sx={{ margin: \"20px 0\" }} />\n            <Stack sx={{ justifyContent: \"center\" }}>\n                <Typography variant=\"LabelLarge\" sx={{ textAlign: \"center\" }}>{hack.Project_Tagline}</Typography>\n            </Stack>\n            <Divider sx={{ margin: \"20px 0\" }} />\n            <Stack rowGap={1} >\n                <Grid container spacing={1} sx={{ justifyContent: \"center\" }}>\n                    {hack.Team_Members && hack.Team_Members.map((team) => {\n                        return (\n                            <Grid item key={team.Name}>\n                                <Tag label={team.Name} />\n                                {/* <Typography variant=\"body2\">{team.Name}</Typography> */}\n                            </Grid>\n                        )\n                    })}\n                </Grid>\n            </Stack>\n        </Paper>\n    );\n}\n\n\nexport default AllSubmissions;\n\n\n"],"names":["__webpack_exports__","_mui_utils__WEBPACK_IMPORTED_MODULE_0__","Z","useControlled","controlled","default","defaultProp","name","state","current","isControlled","react__WEBPACK_IMPORTED_MODULE_0__","useRef","undefined","valueState","setValue","useState","setValueIfUncontrolled","useCallback","newValue","globalId","maybeReactUseId","react__WEBPACK_IMPORTED_MODULE_0___namespace_cache","__webpack_require__","t","useId","idOverride","reactId","useGlobalId","defaultId","setDefaultId","useEffect","window","__NEXT_P","push","FestDashboard","param","user","teamm","id","submission","fest","type","console","log","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Fragment","jsx","Head","title","Header","div","style","margin","marginTop","Typography","variant","details","display","paragraph","sx","mb","team_name","members","map","IconButton","fontSize","HiArrowRight","member","info","maxWidth","subtitle","tags","tag","index","marginLeft","Tag","label","problem","description","solution","styled","Chip","theme","borderRadius","backgroundColor","alpha","palette","primary","main","color"],"sourceRoot":""}