{"version":3,"file":"static/chunks/pages/Explore/CodeArena/Dashboard/Host/[id]-3c5a8b9fa9182457.js","mappings":"qFACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,yCACA,WACA,OAAeC,EAAQ,KACvB,EACA,uOCoCA,IAAMC,EAAYC,IAAQ,IAAMC,QAAAC,GAAA,EAAAJ,EAAAK,CAAA,OAAAL,EAAAK,CAAA,OAAAL,EAAAK,CAAA,OAAAL,EAAAK,CAAA,OAAAL,EAAAK,CAAA,OAAAL,EAAAK,CAAA,OAAAC,IAAA,CAAAN,EAAAO,IAAA,CAAAP,EAAA,QAA4B,yCACxDQ,IAAK,cASM,SAASC,EAAcC,CAAuE,CAAE,IAAzE,CAAEC,KAAAA,CAAAA,CAAMC,KAAAA,CAAAA,CAAMC,KAAAA,CAAAA,CAAMC,YAAAA,CAAAA,CAAaC,iBAAAA,CAAAA,CAAsC,CAAvEL,EAClCM,QAAQC,GAAG,CAACF,EAAkB,eAE9B,IAAMG,EAA+B,CAEjC,CAAEC,MAAO,mBAAoBC,SAAU,GAAOC,KAAM,GAAAC,EAAAC,GAAA,EAACC,EAAAA,GAAaA,CAAAA,CAAAA,GAAKC,UAAW,GAAAH,EAAAC,GAAA,EAACG,EAAAA,CAASA,CAAAA,CAACC,KAAMf,EAAMgB,MAAO,GAAsBC,MAAA,CAAnBhB,EAAKiB,OAAO,CAACC,KAAK,CAAC,sBAAuB,EAC7J,CAAEZ,MAAO,kBAAmBC,SAAU,GAAOC,KAAM,GAAAC,EAAAC,GAAA,EAACC,EAAAA,GAAaA,CAAAA,CAAAA,GAAKC,UAAW,GAAAH,EAAAC,GAAA,EAACS,EAAAA,CAAcA,CAAAA,CAACC,MAAOnB,EAAac,MAAO,GAAsBC,MAAA,CAAnBhB,EAAKiB,OAAO,CAACC,KAAK,CAAC,iBAAkB,EACpK,CACIZ,MAAO,eAAgBC,SAAU,GAAOC,KAAM,GAAAC,EAAAC,GAAA,EAACW,EAAAA,GAAYA,CAAAA,CAAAA,GAAKT,UAAW,GAAAH,EAAAC,GAAA,EAACY,MAAAA,CAAIC,MAAO,CAAEC,OAAQ,MAAO,WACpG,GAAAf,EAAAC,GAAA,EAACe,EAAAA,OAAaA,CAAAA,CAACzB,KAAI,GAAE,GAAGA,CAAI,IAEpC,EAEH,CAED,MACI,GAAAS,EAAAiB,IAAA,EAAAjB,EAAAkB,QAAA,YACI,GAAAlB,EAAAC,GAAA,EAACkB,IAAIA,UACD,GAAAnB,EAAAC,GAAA,EAACQ,QAAAA,UAAM,wCAETpB,CAAAA,EAAK+B,IAAI,CACP,GAAApB,EAAAC,GAAA,EAACtB,EAAAA,CAAU8B,MAAO,iBAAkBY,SAAUhC,EAAKiC,QAAQ,CAAE1B,KAAMA,OAInF","sources":["webpack://_N_E/?0aaf","webpack://_N_E/./pages/Explore/CodeArena/Dashboard/Host/[id].tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/Explore/CodeArena/Dashboard/Host/[id]\",\n      function () {\n        return require(\"private-next-pages/Explore/CodeArena/Dashboard/Host/[id].tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/Explore/CodeArena/Dashboard/Host/[id]\"])\n      });\n    }\n  ","import { GetServerSideProps } from \"next\";\nimport { getSession } from \"next-auth/react\";\nimport * as React from \"react\";\nimport { DefaultUser } from \"@/backend/functions\";\n// import Resume from \"@/components/User/Dashboard/Resume\";\nimport { DashboardProps } from \"@/layout/Dashboard\";\n// import { FaUser } from \"react-icons/fa\";\nimport { MdLeaderboard } from \"react-icons/md\";\nimport { ResumeDataType, ResumeInfo } from \"@/components/User/Dashboard/types\";\nimport Head from \"next/head\";\n// import UserProfile from \"@/components/User/Dashboard/Profiles\";\n// import CardArea from \"@/components/event/ApprovedCard\";\n// import ArenaCard from \"@/components/event/GridCard\";\nimport { CodeArena, viewOnly } from \"@/components/event/types\";\nimport dynamic from \"next/dynamic\";\nimport { Allsubmissions } from \"@/components/Fest/Dashboard/Submission/index\"\nimport { SubmissionData } from \"@/components/Fest/Dashboard/Submission/SubmissonForm\"\nimport Organiser, { RegUserInfo } from \"@/components/Organiser\";\nimport { IoMdSettings } from \"react-icons/io\";\nimport CodeArenaForm from \"@/components/event\";\n// import Analytics from \"@/components/TeamDashboard/Analytics/index\";\n\ninterface UserDashboardProps extends viewOnly {\n    user: DefaultUser;\n    resumedata: ResumeDataType;\n    Profiles: ResumeInfo[];\n    LastEvaluatedKey: lastkey;\n    codearenas: CodeArena[];\n    data: RegUserInfo[];\n    fest: CodeArena;\n    submissions: SubmissionData[];\n    playsubmisstions: any[];\n}\n\nexport type UserProps = {\n    user: DefaultUser;\n};\n\nexport interface lastkey {\n    Username: string;\n}\n\nconst Dashboard = dynamic(() => import(\"@/layout/Dashboard\"), {\n    ssr: false,\n});\n\n// const UnderConstruction = () => {\n//   return (\n//     <Typography sx={{justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\"}} variant=\"h6\">The Page Under Construction</Typography>\n//   );\n// }\n\nexport default function FestDashboard({ user, data, fest, submissions, playsubmisstions }: UserDashboardProps) {\n    console.log(playsubmisstions, \"submissions\");\n\n    const tabs: DashboardProps[\"tabs\"] = [\n        // { label: \"CodeArenas\", disabled: false, icon: <MdLeaderboard />, component: <ArenaCard view data={data} Data={arenas} Title={\"CodeArenas\"} /> },\n        { label: 'Registered Users', disabled: false, icon: <MdLeaderboard />, component: <Organiser Data={data} Title={`${fest.details.title} Registered Users`} /> },\n        { label: 'All Submissions', disabled: false, icon: <MdLeaderboard />, component: <Allsubmissions props={submissions} Title={`${fest.details.title} Submissions`} /> },\n        {\n            label: 'Edit Request', disabled: false, icon: <IoMdSettings />, component: <div style={{ margin: \"30px\" }}>\n                <CodeArenaForm fest {...fest} />\n            </div>\n        },\n\n    ];\n\n    return (\n        <>\n            <Head>\n                <title>Organiser's Dashboard | COMETLABS</title>\n            </Head>\n            {(user.role == \"admin\" || \"org\") &&\n                <Dashboard title={\"Host Dashboard\"} subtitle={user.username} tabs={tabs} />\n            }\n        </>\n    )\n}\n\n\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n    const session = await getSession(context);\n    const { id } = context.query;\n    console.log(id)\n\n    if (!!session) {\n        const user: DefaultUser = session.user as DefaultUser;\n        try {\n            const accessToken = \"Token \" + user.accessToken;\n            let [registeredusers, festdetails, eventsubmissions, playgroundSubmissions] = await Promise.all([\n                fetch(process.env.NEXT_PUBLIC_API_URL + \"/organize/getRegistered\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                        body: JSON.stringify({\n                            eventId: id\n                        }),\n                    }\n                ),\n                fetch(process.env.NEXT_PUBLIC_API_URL + \"/fests/viewFest\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                        body: JSON.stringify({ id: id })\n                    }\n                ),\n                fetch(process.env.NEXT_PUBLIC_API_URL + \"/organize/getEventSubmissions\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                        body: JSON.stringify({ eventId: id })\n                    }\n                ),\n                fetch(process.env.NEXT_PUBLIC_API_URL + \"/labs/getPlaygroundSubmissions\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json;charset=utf-8\",\n                            Authorization: accessToken,\n                        },\n                        body: JSON.stringify({ question_id: id, latest: true })\n                    }\n                ),\n                // fetch(process.env.NEXT_PUBLIC_API_URL + \"/labs/getPlaygroundSubmissions\",\n                //     {\n                //         method: \"POST\",\n                //         headers: {\n                //             \"Content-Type\": \"application/json;charset=utf-8\",\n                //             Authorization: accessToken,\n                //         },\n                //         body: JSON.stringify({ question_id: id, user_id: user.id, isSubmission: true })\n                //     }\n                // ) // TO GET TO KNOW IF THERE IS PLAYGROUND SUBMISSION EXIST OR NOT\n            ]);\n\n            // return { props: { user } }\n\n            if ([registeredusers.ok]) {\n                const data = await registeredusers.json();\n                const fest = await festdetails.json()\n                const submissions = await eventsubmissions.json();\n                const playsubmisstions = await playgroundSubmissions.json();\n\n                return {\n                    props: {\n                        user,\n                        data,\n                        fest,\n                        submissions,\n                        playsubmisstions\n                    },\n                };\n            } else if (registeredusers.status == 401) {\n                return {\n                    redirect: {\n                        permanent: false,\n                        destination: \"/logout\",\n                    }\n                }\n            } else {\n                throw new Error(\"ERROR\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    return {\n        redirect: {\n            permanent: false,\n            destination: \"/signin\",\n        },\n    };\n};"],"names":["window","__NEXT_P","push","__webpack_require__","Dashboard","dynamic","Promise","all","e","then","bind","ssr","FestDashboard","param","user","data","fest","submissions","playsubmisstions","console","log","tabs","label","disabled","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","MdLeaderboard","component","Organiser","Data","Title","concat","details","title","Allsubmissions","props","IoMdSettings","div","style","margin","CodeArenaForm","jsxs","Fragment","Head","role","subtitle","username"],"sourceRoot":""}