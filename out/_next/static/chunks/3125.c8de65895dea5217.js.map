{"version":3,"file":"static/chunks/3125.c8de65895dea5217.js","mappings":"4JAEO,SAAAA,EAAAC,CAAA,EACP,MAAS,GAAAC,EAAAC,CAAA,EAAoB,aAAAF,EAC7B,CACA,IAAAG,EAAuB,GAAAC,EAAAF,CAAA,EAAsB,+LAC7CG,CAAAA,EAAA,EAAeF,kFCQR,IAAMG,EAA0B,MACrCC,EACAC,EACAC,IAC2B,CAC3B,IAAIC,EAAiB,IAAIC,SACzBD,EAAeE,MAAM,CAAC,WAAYJ,EAAMA,EAAKK,IAAI,EACjDH,EAAeE,MAAM,CAAC,SAAUL,GAChCO,QAAQC,GAAG,CAACL,GACZ,IAAIM,EAAM,MAAMC,MACdC,wDACA,CACEC,OAAQ,OACRC,QAAS,CACPC,cAAeZ,CACjB,EACAa,KAAMZ,CACR,GAEEa,EAAM,IAAI,CAKd,OAJIP,EAAIQ,EAAE,EAERD,CAAAA,EAAMP,CADNA,EAAM,MAAMA,EAAIS,IAAI,IACVF,GAAG,EAERA,CACT,EAGaG,EAA2B,MACtCC,EACAnB,EACAC,IAC2B,CAC3BK,QAAQC,GAAG,CAACY,GACZ,IAAMjB,EAAiB,IAAIC,SAC3BD,EAAeE,MAAM,CAAC,WAAYJ,EAAMA,EAAKK,IAAI,EACjDH,EAAeE,MAAM,CAAC,QAASe,GAC/B,IAAIX,EAAM,MAAMC,MACdC,2DACA,CACEC,OAAQ,OACRC,QAAS,CACPC,cAAeZ,CACjB,EACAa,KAAMZ,CACR,GAEEa,EAAM,IAAI,CAKd,OAJIP,EAAIQ,EAAE,EAERD,CAAAA,EAAMP,CADNA,EAAM,MAAMA,EAAIS,IAAI,IACVF,GAAG,EAERA,CACT","sources":["webpack://_N_E/./node_modules/@mui/material/Divider/dividerClasses.js","webpack://_N_E/./backend/functions/index.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getDividerUtilityClass(slot) {\n  return generateUtilityClass('MuiDivider', slot);\n}\nconst dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);\nexport default dividerClasses;","export const handleLandingPageEmailSubmit = (email: string) => {\n  alert(email + \" submitted for learn more\");\n};\n\nexport const handleFestCardLike = (id: string) => {\n  // id is the fest identifier\n  alert(\"user liked fest - \" + id);\n};\n\n// var form = $('#profile-photo')[0];\n// var formData = new FormData(form);\n\n\n// TODO: Add FestId\nexport const handleSingleImageUpload = async (\n  festId: string,\n  file: File,\n  accessToken: string\n): Promise<string | null> => {\n  let uploadFormData = new FormData();\n  uploadFormData.append('fileName', file, file.name);\n  uploadFormData.append('festId', festId);\n  console.log(uploadFormData);\n  let res = await fetch(\n    process.env.NEXT_PUBLIC_API_URL + \"/fests/uploadToFestS3\",\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: accessToken,\n      },\n      body: uploadFormData,\n    }\n  );\n  let url = null;\n  if (res.ok) {\n    res = await res.json();\n    url = res.url;\n  }\n  return url;\n};\n\n\nexport const handleProfileImageUpload = async (\n  email: string,\n  file: File,\n  accessToken: string\n): Promise<string | null> => {\n  console.log(email)\n  const uploadFormData = new FormData();\n  uploadFormData.append(\"fileName\", file, file.name);\n  uploadFormData.append(\"email\", email);\n  let res = await fetch(\n    process.env.NEXT_PUBLIC_API_URL + \"/user/uploadProfileImage\",\n    {\n      method: \"POST\",\n      headers: {\n        Authorization: accessToken,\n      },\n      body: uploadFormData,\n    }\n  );\n  let url = null;\n  if (res.ok) {\n    res = await res.json();\n    url = res.url;\n  }\n  return url;\n};\n\n\nexport const handleSubmissionImageUpload = async (\n  team_id: string,\n  file: File\n): Promise<string | null> => {\n  console.log(team_id)\n  const uploadFormData = new FormData();\n  uploadFormData.append(\"fileName\", file);\n  uploadFormData.append(\"team_id\", team_id);\n  let res = await fetch(\n    process.env.NEXT_PUBLIC_API_URL + \"/c2d/uploadS3submission\",\n    {\n      method: \"POST\",\n      body: uploadFormData,\n    }\n  );\n  let url = null;\n  if (res.ok) {\n    res = await res.json();\n    url = res.url;\n  }\n  return url;\n};\n\nexport interface UserCredentails {\n  username: string;\n  password: string;\n}\n\nexport type NewUser = {\n  id: string;\n  name: string;\n  email: string;\n  profileImage: string;\n  accessToken: string;\n  username: string;\n  role: string;\n};\n\nexport type DefaultUser = {\n  id: string;\n  name: string;\n  email: string;\n  profileImage: string;\n  accessToken: string;\n  username: string;\n  role: string;\n  createdAt: Date;\n  lastLogin: Date;\n}\n\nexport const handleCustomSignIn = async (\n  params: UserCredentails\n): Promise<DefaultUser | null> => {\n  let user: DefaultUser | null = null;\n  try {\n    const res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/loginwithpassword\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email: params.username,\n          password: params.password,\n          remember: \"true\",\n        }),\n      }\n    );\n    if (res.ok) {\n      const { firstName, email, accessToken, profileImage, error, username, role, id } = await res.json();\n      if (!error) {\n        user = {\n          name: firstName,\n          email: email,\n          accessToken: accessToken,\n          // TODO: replace uuid, festid and imageUrl with backend data\n          id: id,\n          profileImage: profileImage,\n          username: username,\n          role: role,\n          createdAt: new Date(),\n          lastLogin: new Date(),\n        };\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  } finally {\n    return user;\n  }\n};\n\nexport const getGitHubEmail = async (\n  accessToken: string | undefined\n): Promise<string> => {\n  if (accessToken === undefined) {\n    return \"\";\n  }\n  const requestHeaders: HeadersInit = new Headers();\n  const authToken = `token ${accessToken}`;\n  requestHeaders.set(\"Authorization\", authToken);\n  const res = await fetch(\"https://api.github.com/user/emails\", {\n    headers: requestHeaders,\n  });\n  const emails = await res.json();\n  let email: string = \"\";\n  if (emails?.length > 0) {\n    email = emails.sort((a: any, b: any) => b.primary - a.primary)[0].email;\n  }\n  return email;\n};\n\ntype SigninWithoutPasswordProps = {\n  email: string;\n  name: string;\n  imageUrl: string;\n  username: string;\n};\n\ntype LoginInfo = {\n  accessToken?: string;\n  id?: string;\n  username?: string;\n  profileImage?: string;\n  name?: string;\n  createdAt?: Date;\n  lastLogin?: Date;\n};\n\nexport const signinWithoutPassword = async (\n  props: Partial<SigninWithoutPasswordProps>\n): Promise<LoginInfo> => {\n  const { email, name, imageUrl } = props;\n  const firstName = name?.substring(0, name.indexOf(\" \"));\n  const lastName = name?.substring(name.indexOf(\" \") + 1);\n  try {\n    const res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/loginwithoutpassword\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          email,\n          firstName, lastName,\n          profileImage: imageUrl,\n        }),\n      }\n    );\n    if (res.ok) {\n      const { accessToken, id, username, profileImage, firstName, lastName, error, createdAt, lastLogin } = await res.json();\n      if (!error) {\n        // TODO: Replace with uuid\n        return {\n          accessToken: accessToken,\n          id: id,\n          username: username,\n          profileImage: profileImage,\n          name: firstName + ' ' + lastName,\n          createdAt: createdAt,\n          lastLogin: lastLogin\n        };\n      }\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  return {};\n};\n\nexport type SignupData = {\n  email: string;\n  password: string;\n  confirm: string;\n  firstName: string;\n  lastName: string;\n  profileImage?: string;\n  mobile: string;\n  mobileLocal: number;\n  countryCode: string;\n  role: string;\n  otpm: string;\n  otpe: string;\n};\n\nexport const sendOtp = async (data: SignupData, type: string) => {\n  try {\n    let res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/signup/mailotp\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({ ...data }),\n      }\n    );\n    if (res.ok) {\n      const mailer = await res.json();\n      if (type === \"RESEND\" && mailer.success) {\n        console.log(\"OTP sent to \" + data.email);\n      } else return mailer;\n    } else {\n      throw new Error(\"ON OTP_SEND: Bad response from server\");\n    }\n  } catch (error) {\n    console.log(\"Oops! Unable to send OTP.\");\n  }\n};\n\nexport const sendMobileOtp = async (data: SignupData, type: string) => {\n  try {\n    let res = await fetch(\n      process.env.NEXT_PUBLIC_API_URL + \"/api/smsOTP\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json;charset=utf-8\",\n        },\n        body: JSON.stringify({ phone: data.mobile }),\n      }\n    );\n    if (res.ok) {\n      const mailer = await res.json();\n      if (type === \"RESEND\" && mailer.success) {\n        console.log(\"OTP sent to \" + data.mobile);\n      } else return mailer;\n    } else {\n      throw new Error(\"ON OTP_SEND: Bad response from server\");\n    }\n  } catch (error) {\n    console.log(\"Oops! Unable to send OTP.\");\n  }\n};\n\n\n\n// export const userLogOut = async (token: string) => {\n//   try {\n//     let res = await fetch(\n//       process.env.NEXT_PUBLIC_API_URL + \"/api/logout\",\n//       {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json;charset=utf-8\",\n//           Authorization: `bearer ${token}`,\n//         },\n//       }\n//     );\n//     if (res.ok) {\n//       const result = await res.json();\n//       if (result.success) {\n//         return result;\n//       }\n//       else {\n//         return result;\n//       }\n//      } else {\n//       throw new Error(\"unable to logout\");\n//     }\n//   } catch (error) {\n//     console.log(\"unable to log out\");\n//   }\n// };"],"names":["getDividerUtilityClass","slot","_generateUtilityClass__WEBPACK_IMPORTED_MODULE_0__","Z","dividerClasses","_mui_utils__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","handleSingleImageUpload","festId","file","accessToken","uploadFormData","FormData","append","name","console","log","res","fetch","process","method","headers","Authorization","body","url","ok","json","handleProfileImageUpload","email"],"sourceRoot":""}